<?php
 if (!defined('THINK_PATH')) exit(); if(version_compare(PHP_VERSION,'6.0.0','<') ) { @set_magic_quotes_runtime (0); define('MAGIC_QUOTES_GPC',get_magic_quotes_gpc()?True:False); } define('OUTPUT_GZIP_ON',ini_get('output_handler') || ini_get('zlib.output_compression') ); define('MEMORY_LIMIT_ON',function_exists('memory_get_usage')?true:false); if(MEMORY_LIMIT_ON) { $GLOBALS['_startUseMems'] = memory_get_usage(); } define('PHP_SAPI_NAME',php_sapi_name()); define('IS_APACHE',strstr($_SERVER['SERVER_SOFTWARE'], 'Apache') || strstr($_SERVER['SERVER_SOFTWARE'], 'LiteSpeed') ); define('IS_IIS',PHP_SAPI_NAME =='isapi' ? 1 : 0); define('IS_CGI',substr(PHP_SAPI_NAME, 0,3)=='cgi' ? 1 : 0 ); define('IS_WIN',strstr(PHP_OS, 'WIN') ? 1 : 0 ); define('IS_LINUX',strstr(PHP_OS, 'Linux') ? 1 : 0 ); define('IS_FREEBSD',strstr(PHP_OS, 'FreeBSD') ? 1 : 0 ); define('NOW',time() ); if(!defined('_PHP_FILE_')) { if(IS_CGI) { $_temp = explode('.php',$_SERVER["PHP_SELF"]); define('_PHP_FILE_', rtrim(str_replace($_SERVER["HTTP_HOST"],'',$_temp[0].'.php'),'/')); }else { define('_PHP_FILE_', rtrim($_SERVER["SCRIPT_NAME"],'/')); } } if(!defined('WEB_URL')) { if( strtoupper(APP_NAME) == strtoupper(basename(dirname(_PHP_FILE_))) ) { $_root = dirname(dirname(_PHP_FILE_)); }else { $_root = dirname(_PHP_FILE_); } define('WEB_URL', (($_root=='/' || $_root=='\\')?'':$_root)); } define('VENDOR_PATH',ROOT_PATH.'/Include/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); define('CACHE_DIR', 'Cache'); define('HTML_DIR', 'Html'); define('CONF_DIR', 'Conf'); define('LIB_DIR', 'Lib'); define('LOG_DIR', 'Logs'); define('LANG_DIR', 'Lang'); define('TEMP_DIR', 'Temp'); define('TMPL_DIR', 'Tpl'); if (!defined('ADMIN_PATH')) define('ADMIN_PATH', APP_PATH.'/../Admin/'); define('TMPL_PATH',APP_PATH.'/'.TMPL_DIR.'/'); define('HTML_PATH',APP_PATH.'/'.HTML_DIR.'/'); define('COMMON_PATH', APP_PATH.'/Common/'); define('LIB_PATH', APP_PATH.'/'.LIB_DIR.'/'); define('CACHE_PATH', TC_DATA_PATH.'/'.CACHE_DIR.'/'); define('CONFIG_PATH', APP_PATH.'/'.CONF_DIR.'/'); define('CMSMODULE_PATH', APP_PATH.'/'.LIB_DIR.'/Module/'); define('LOG_PATH', TC_DATA_PATH.'/'.LOG_DIR.'/'); define('LANG_PATH', APP_PATH.'/'.LANG_DIR.'/'); define('TEMP_PATH', TC_DATA_PATH.'/'.TEMP_DIR.'/'); define('UPLOAD_PATH', APP_PATH.'/Uploads/'); define('PLUGIN_PATH', APP_PATH.'/PlugIns/'); define('DATA_PATH', TC_DATA_PATH.'/Data/'); define('WEB_LOG_ERROR',0); define('WEB_LOG_DEBUG',1); define('SQL_LOG_DEBUG',2); define('SYSTEM_LOG',0); define('MAIL_LOG',1); define('TCP_LOG',2); define('FILE_LOG',3); define('DATA_TYPE_OBJ',1); define('DATA_TYPE_ARRAY',0); define('URL_COMMON', 0); define('URL_PATHINFO', 1); define('URL_REWRITE', 2); define('URL_COMPAT', 3); define('THINK_VERSION', '1.5.1beta'); ?><?php
 function get_client_ip(){ if (getenv("HTTP_CLIENT_IP") && strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown")) $ip = getenv("HTTP_CLIENT_IP"); else if (getenv("HTTP_X_FORWARDED_FOR") && strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown")) $ip = getenv("HTTP_X_FORWARDED_FOR"); else if (getenv("REMOTE_ADDR") && strcasecmp(getenv("REMOTE_ADDR"), "unknown")) $ip = getenv("REMOTE_ADDR"); else if (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], "unknown")) $ip = $_SERVER['REMOTE_ADDR']; else $ip = "unknown"; return($ip); } function url($action=ACTION_NAME,$module=MODULE_NAME,$route='',$app=APP_NAME,$params=array()) { if(C('DISPATCH_ON') && C('URL_MODEL')>0) { switch(C('PATH_MODEL')) { case 1: $str = '/'; foreach ($params as $var=>$val) $str .= $var.'/'.$val.'/'; $str = substr($str,0,-1); if(!empty($route)) { $url = str_replace(APP_NAME,$app,__APP__).'/'.C('VAR_ROUTER').'/'.$route.'/'.$str; }else{ $url = str_replace(APP_NAME,$app,__APP__).'/'.C('VAR_MODULE').'/'.$module.'/'.C('VAR_ACTION').'/'.$action.$str; } break; case 2: $depr = C('PATH_DEPR'); $str = $depr; foreach ($params as $var=>$val) $str .= $var.$depr.$val.$depr; $str = substr($str,0,-1); if(!empty($route)) { $url = str_replace(APP_NAME,$app,__APP__).'/'.$route.$str; }else{ $url = str_replace(APP_NAME,$app,__APP__).'/'.$module.$depr.$action.$str; } break; } if(C('HTML_URL_SUFFIX')) { $url .= C('HTML_URL_SUFFIX'); } }else{ $params = http_build_query($params); if(!empty($route)) { $url = str_replace(APP_NAME,$app,__APP__).'?'.C('VAR_ROUTER').'='.$route.'&'.$params; }else{ $url = str_replace(APP_NAME,$app,__APP__).'?'.C('VAR_MODULE').'='.$module.'&'.C('VAR_ACTION').'='.$action.'&'.$params; } } return $url; } function halt($error) { $e = array(); if(C('DEBUG_MODE') && strtoupper(C( 'TMPL_ENGINE_TYPE' )) == 'THINK'){ if(!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['class'] = $trace[0]['class']; $e['function'] = $trace[0]['function']; $e['line'] = $trace[0]['line']; $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")<br/>"; } $e['trace'] = $traceInfo; }else { $e = $error; } if(C('EXCEPTION_TMPL_FILE')) { include C('EXCEPTION_TMPL_FILE'); }else{ include THINK_PATH.'/Tpl/ThinkException.tpl.php'; } } else { $error_page = C('ERROR_PAGE'); if(!empty($error_page)){ redirect($error_page); }else { if(C('SHOW_ERROR_MSG')) { $e['message'] = is_array($error)?$error['message']:$error; }else{ $e['message'] = C('ERROR_MESSAGE'); } if(C('EXCEPTION_TMPL_FILE')) { include C('EXCEPTION_TMPL_FILE'); }else{ include THINK_PATH.'/Tpl/ThinkException.tpl.php'; } } } exit; } function redirect($url,$time=0,$msg='') { $url = str_replace(array("\n", "\r"), '', $url); if(empty($msg)) { $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; } if (!headers_sent()) { header("Content-Type:text/html; charset=".C('OUTPUT_CHARSET')); if(0===$time) { header("Location: ".$url); }else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); }else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if($time!=0) { $str .= $msg; } exit($str); } } function throw_exception($msg,$type='ThinkException',$code=0) { if(isset($_REQUEST[C('VAR_AJAX_SUBMIT')])) { header("Content-Type:text/html; charset=utf-8"); exit($msg); } if(class_exists($type,false)){ throw new $type($msg,$code,true); }else { halt($msg); } } function debug_start($label='') { $GLOBALS[$label]['_beginTime'] = microtime(TRUE); if ( MEMORY_LIMIT_ON ) $GLOBALS[$label]['memoryUseStartTime'] = memory_get_usage(); } function debug_end($label='') { $GLOBALS[$label]['_endTime'] = microtime(TRUE); echo '<div style="text-align:center;width:100%">Process '.$label.': Times '.number_format($GLOBALS[$label]['_endTime']-$GLOBALS[$label]['_beginTime'],6).'s '; if ( MEMORY_LIMIT_ON ) { $GLOBALS[$label]['memoryUseEndTime'] = memory_get_usage(); echo ' Memories '.number_format(($GLOBALS[$label]['memoryUseEndTime']-$GLOBALS[$label]['memoryUseStartTime'])/1024).' k'; } echo '</div>'; } function system_out($msg) { if(!empty($msg)) Log::record($msg,WEB_LOG_DEBUG); } function dump($var, $echo=true,$label=null, $strict=true) { $label = ($label===null) ? '' : rtrim($label) . ' '; if(!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = "<pre>".$label.htmlspecialchars($output,ENT_QUOTES,C('OUTPUT_CHARSET'))."</pre>"; } else { $output = $label . " : " . print_r($var, true); } }else { ob_start(); var_dump($var); $output = ob_get_clean(); if(!extension_loaded('xdebug')) { $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES,C('OUTPUT_CHARSET')) . '</pre>'; } } if ($echo) { echo($output); return null; }else { return $output; } } function auto_charset($fContents,$from='',$to=''){ if(empty($from)) $from = C('TEMPLATE_CHARSET'); if(empty($to)) $to = C('OUTPUT_CHARSET'); $from = strtoupper($from)=='UTF8'? 'utf-8':$from; $to = strtoupper($to)=='UTF8'? 'utf-8':$to; if( strtoupper($from) === strtoupper($to) || empty($fContents) || (is_scalar($fContents) && !is_string($fContents)) ){ return $fContents; } if(is_string($fContents) ) { if(function_exists('mb_convert_encoding')){ return mb_convert_encoding ($fContents, $to, $from); }elseif(function_exists('iconv')){ return iconv($from,$to,$fContents); }else{ halt(L('_NO_AUTO_CHARSET_')); return $fContents; } } elseif(is_array($fContents)){ foreach ( $fContents as $key => $val ) { $_key = auto_charset($key,$from,$to); $fContents[$_key] = auto_charset($val,$from,$to); if($key != $_key ) { unset($fContents[$key]); } } return $fContents; } elseif(is_object($fContents)) { $vars = get_object_vars($fContents); foreach($vars as $key=>$val) { $fContents->$key = auto_charset($val,$from,$to); } return $fContents; } else{ return $fContents; } } function get_instance_of($className,$method='',$args=array()) { static $_instance = array(); if(empty($args)) { $identify = $className.$method; }else{ $identify = $className.$method.to_guid_string($args); } if (!isset($_instance[$identify])) { if(class_exists($className)){ $o = new $className(); if(method_exists($o,$method)){ if(!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); }else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_')); } return $_instance[$identify]; } function __autoload($classname) { if(substr($classname,-5)=="Model") { if(!import('@.Model.'.$classname)){ import("@.*.Model.".$classname); } }elseif(substr($classname,-6)=="Action"){ if(!import('@.Action.'.$classname)) { import("@.*.Action.".$classname); } }else { if(C('AUTO_LOAD_PATH')) { $paths = explode(',',C('AUTO_LOAD_PATH')); foreach ($paths as $path){ if(import($path.$classname)) { return ; } } } } return ; } function unserialize_callback($classname) { if(C('CALLBACK_LOAD_PATH')) { $paths = explode(',',C('CALLBACK_LOAD_PATH')); foreach ($paths as $path){ if(import($path.$classname)) { return ; } } } } $GLOBALS['import_file'] = array(); function include_cache($filename) { if (!isset($GLOBALS['import_file'][$filename])) { if(file_exists_case($filename)){ include $filename; $GLOBALS['import_file'][$filename] = true; } else { $GLOBALS['import_file'][$filename] = false; } } return $GLOBALS['import_file'][$filename]; } function require_cache($filename) { if (!isset($GLOBALS['import_file'][$filename])) { if(file_exists_case($filename)){ require $filename; $GLOBALS['import_file'][$filename] = true; } else { $GLOBALS['import_file'][$filename] = false; } } return $GLOBALS['import_file'][$filename]; } function file_exists_case($filename) { if(is_file($filename)) { if(IS_WIN && C('CHECK_FILE_CASE')) { if(basename(realpath($filename)) != basename($filename)) { return false; } } return true; } return false; } function import($class,$baseUrl = '',$ext='.class.php',$subdir=false) { static $_file = array(); static $_class = array(); $class = str_replace(array('.','#'), array('/','.'), $class); if(isset($_file[strtolower($class.$baseUrl)])) return true; else $_file[strtolower($class.$baseUrl)] = true; if( 0 === strpos($class,'@')) $class = str_replace('@',APP_NAME,$class); if(empty($baseUrl)) { $baseUrl = dirname(LIB_PATH); }else { $isPath = true; } $class_strut = explode("/",$class); if('*' == $class_strut[0] || isset($isPath) ) { } elseif(APP_NAME == $class_strut[0]) { $class = str_replace(APP_NAME.'/',LIB_DIR.'/',$class); } elseif(in_array(strtolower($class_strut[0]),array('think','org','com'))) { $baseUrl = THINK_PATH.'/'.LIB_DIR.'/'; }else { $class = substr_replace($class, '', 0,strlen($class_strut[0])+1); $baseUrl = APP_PATH.'/../'.$class_strut[0].'/'.LIB_DIR.'/'; } if(substr($baseUrl, -1) != "/") $baseUrl .= "/"; $classfile = $baseUrl . $class . $ext; if(false !== strpos($classfile,'*') || false !== strpos($classfile,'?') ) { $match = glob($classfile); if($match) { foreach($match as $key=>$val) { if(is_dir($val)) { if($subdir) import('*',$val.'/',$ext,$subdir); }else{ if($ext == '.class.php') { $class = basename($val,$ext); if(isset($_class[$class])) { throw_exception($class.L('_CLASS_CONFLICT_')); } $_class[$class] = $val; } require_cache($val); } } return true; }else{ return false; } }else{ if($ext == '.class.php' && is_file($classfile)) { $class = basename($classfile,$ext); if(isset($_class[strtolower($class)])) { throw_exception(L('_CLASS_CONFLICT_').':'.$_class[strtolower($class)].' '.$classfile); } $_class[strtolower($class)] = $classfile; } return require_cache($classfile); } } function using($class,$baseUrl = LIB_PATH,$ext='.class.php',$subdir=false) { return import($class,$baseUrl,$ext,$subdir); } function vendor($class,$baseUrl = '',$ext='.php',$subdir=false) { if(empty($baseUrl)) { $baseUrl = VENDOR_PATH; } return import($class,$baseUrl,$ext,$subdir); } function to_guid_string($mix) { if(is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); }elseif(is_resource($mix)){ $mix = get_resource_type($mix).strval($mix); }else{ $mix = serialize($mix); } return md5($mix); } function is_instance_of($object, $className) { if (!is_object($object) && !is_string($object)) { return false; } return $object instanceof $className; } function msubstr($str, $start=0, $length, $charset="utf-8", $suffix=true) { if($suffix) $suffixStr = "…"; else $suffixStr = ""; if(function_exists("mb_substr")) return mb_substr($str, $start, $length, $charset).$suffixStr; elseif(function_exists('iconv_substr')) { return iconv_substr($str,$start,$length,$charset).$suffixStr; } $re['utf-8'] = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/"; $re['gb2312'] = "/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/"; $re['gbk'] = "/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/"; $re['big5'] = "/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/"; preg_match_all($re[$charset], $str, $match); $slice = join("",array_slice($match[0], $start, $length)); return $slice.$suffixStr; } function rand_string($len=6,$type='',$addChars='') { $str =''; switch($type) { case 0: $chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.$addChars; break; case 1: $chars= str_repeat('0123456789',3); break; case 2: $chars='ABCDEFGHIJKLMNOPQRSTUVWXYZ'.$addChars; break; case 3: $chars='abcdefghijklmnopqrstuvwxyz'.$addChars; break; case 4: $chars = "们以我到他会作时要动国产的一是工就年阶义发成部民可出能方进在了不和有大这主中人上为来分生对于学下级地个用同行面说种过命度革而多子后自社加小机也经力线本电高量长党得实家定深法表着水理化争现所二起政三好十战无农使性前等反体合斗路图把结第里正新开论之物从当两些还天资事队批点育重其思与间内去因件日利相由压员气业代全组数果期导平各基或月毛然如应形想制心样干都向变关问比展那它最及外没看治提五解系林者米群头意只明四道马认次文通但条较克又公孔领军流入接席位情运器并飞原油放立题质指建区验活众很教决特此常石强极土少已根共直团统式转别造切九你取西持总料连任志观调七么山程百报更见必真保热委手改管处己将修支识病象几先老光专什六型具示复安带每东增则完风回南广劳轮科北打积车计给节做务被整联步类集号列温装即毫知轴研单色坚据速防史拉世设达尔场织历花受求传口断况采精金界品判参层止边清至万确究书术状厂须离再目海交权且儿青才证低越际八试规斯近注办布门铁需走议县兵固除般引齿千胜细影济白格效置推空配刀叶率述今选养德话查差半敌始片施响收华觉备名红续均药标记难存测士身紧液派准斤角降维板许破述技消底床田势端感往神便贺村构照容非搞亚磨族火段算适讲按值美态黄易彪服早班麦削信排台声该击素张密害侯草何树肥继右属市严径螺检左页抗苏显苦英快称坏移约巴材省黑武培著河帝仅针怎植京助升王眼她抓含苗副杂普谈围食射源例致酸旧却充足短划剂宣环落首尺波承粉践府鱼随考刻靠够满夫失包住促枝局菌杆周护岩师举曲春元超负砂封换太模贫减阳扬江析亩木言球朝医校古呢稻宋听唯输滑站另卫字鼓刚写刘微略范供阿块某功套友限项余倒卷创律雨让骨远帮初皮播优占死毒圈伟季训控激找叫云互跟裂粮粒母练塞钢顶策双留误础吸阻故寸盾晚丝女散焊功株亲院冷彻弹错散商视艺灭版烈零室轻血倍缺厘泵察绝富城冲喷壤简否柱李望盘磁雄似困巩益洲脱投送奴侧润盖挥距触星松送获兴独官混纪依未突架宽冬章湿偏纹吃执阀矿寨责熟稳夺硬价努翻奇甲预职评读背协损棉侵灰虽矛厚罗泥辟告卵箱掌氧恩爱停曾溶营终纲孟钱待尽俄缩沙退陈讨奋械载胞幼哪剥迫旋征槽倒握担仍呀鲜吧卡粗介钻逐弱脚怕盐末阴丰雾冠丙街莱贝辐肠付吉渗瑞惊顿挤秒悬姆烂森糖圣凹陶词迟蚕亿矩康遵牧遭幅园腔订香肉弟屋敏恢忘编印蜂急拿扩伤飞露核缘游振操央伍域甚迅辉异序免纸夜乡久隶缸夹念兰映沟乙吗儒杀汽磷艰晶插埃燃欢铁补咱芽永瓦倾阵碳演威附牙芽永瓦斜灌欧献顺猪洋腐请透司危括脉宜笑若尾束壮暴企菜穗楚汉愈绿拖牛份染既秋遍锻玉夏疗尖殖井费州访吹荣铜沿替滚客召旱悟刺脑措贯藏敢令隙炉壳硫煤迎铸粘探临薄旬善福纵择礼愿伏残雷延烟句纯渐耕跑泽慢栽鲁赤繁境潮横掉锥希池败船假亮谓托伙哲怀割摆贡呈劲财仪沉炼麻罪祖息车穿货销齐鼠抽画饲龙库守筑房歌寒喜哥洗蚀废纳腹乎录镜妇恶脂庄擦险赞钟摇典柄辩竹谷卖乱虚桥奥伯赶垂途额壁网截野遗静谋弄挂课镇妄盛耐援扎虑键归符庆聚绕摩忙舞遇索顾胶羊湖钉仁音迹碎伸灯避泛亡答勇频皇柳哈揭甘诺概宪浓岛袭谁洪谢炮浇斑讯懂灵蛋闭孩释乳巨徒私银伊景坦累匀霉杜乐勒隔弯绩招绍胡呼痛峰零柴簧午跳居尚丁秦稍追梁折耗碱殊岗挖氏刃剧堆赫荷胸衡勤膜篇登驻案刊秧缓凸役剪川雪链渔啦脸户洛孢勃盟买杨宗焦赛旗滤硅炭股坐蒸凝竟陷枪黎救冒暗洞犯筒您宋弧爆谬涂味津臂障褐陆啊健尊豆拔莫抵桑坡缝警挑污冰柬嘴啥饭塑寄赵喊垫丹渡耳刨虎笔稀昆浪萨茶滴浅拥穴覆伦娘吨浸袖珠雌妈紫戏塔锤震岁貌洁剖牢锋疑霸闪埔猛诉刷狠忽灾闹乔唐漏闻沈熔氯荒茎男凡抢像浆旁玻亦忠唱蒙予纷捕锁尤乘乌智淡允叛畜俘摸锈扫毕璃宝芯爷鉴秘净蒋钙肩腾枯抛轨堂拌爸循诱祝励肯酒绳穷塘燥泡袋朗喂铝软渠颗惯贸粪综墙趋彼届墨碍启逆卸航衣孙龄岭骗休借".$addChars; break; default : $chars='ABCDEFGHIJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789'.$addChars; break; } if($len>10 ) { $chars= $type==1? str_repeat($chars,$len) : str_repeat($chars,5); } if($type!=4) { $chars = str_shuffle($chars); $str = substr($chars,0,$len); }else{ for($i=0;$i<$len;$i++){ $str.= msubstr($chars, floor(mt_rand(0,mb_strlen($chars,'utf-8')-1)),1); } } return $str; } function build_verify ($length=4,$mode=1) { return rand_string($length,$mode); } if(!function_exists('stripslashes_deep')) { function stripslashes_deep($value) { $value = is_array($value) ? array_map('stripslashes_deep', $value) : stripslashes($value); return $value; } } function D($className='',$appName='') { static $_model = array(); if(empty($className)) { return new Model(); } if(empty($appName)) { $appName = C('DEFAULT_MODEL_APP'); } if(isset($_model[$appName.$className])) { return $_model[$appName.$className]; } $OriClassName = $className; if(strpos($className,C('COMPONENT_DEPR'))) { $array = explode(C('COMPONENT_DEPR'),$className); $className = array_pop($array); $className = C('MODEL_CLASS_PREFIX').$className.C('MODEL_CLASS_SUFFIX'); if(C('COMPONENT_TYPE')==1) { import($appName.'.'.implode('.',$array).'.Model.'.$className); }else{ import($appName.'.Model.'.implode('.',$array).'.'.$className); } }else{ $className = C('MODEL_CLASS_PREFIX').$className.C('MODEL_CLASS_SUFFIX'); if(!import($appName.'.Model.'.$className)) { if(C('COMPONENT_TYPE')==1) { import($appName.'.*.Model.'.$className); }else{ import($appName.'.Model.*.'.$className); } } } if(class_exists($className)) { $model = new $className(); $_model[$appName.$OriClassName] = $model; return $model; }else { throw_exception($className.L('_MODEL_NOT_EXIST_')); return false; } } function A($className,$appName='@') { static $_action = array(); if(isset($_action[$appName.$className])) { return $_action[$appName.$className]; } $OriClassName = $className; if(strpos($className,C('COMPONENT_DEPR'))) { $array = explode(C('COMPONENT_DEPR'),$className); $className = array_pop($array); $className = C('CONTR_CLASS_PREFIX').$className.C('CONTR_CLASS_SUFFIX'); if(C('COMPONENT_TYPE')==1) { import($appName.'.'.implode('.',$array).'.Action.'.$className); }else{ import($appName.'.Action.'.implode('.',$array).'.'.$className); } }else{ $className = C('CONTR_CLASS_PREFIX').$className.C('CONTR_CLASS_SUFFIX'); if(!import($appName.'.Action.'.$className)) { if(C('COMPONENT_TYPE')==1) { import($appName.'.*.Action.'.$className); }else{ import($appName.'.Action.*.'.$className); } } } if(class_exists($className)) { $action = new $className(); $_action[$appName.$OriClassName] = $action; return $action; }else { return false; } } function L($name='',$value=null) { static $_lang = array(); if(!is_null($value)) { $_lang[strtolower($name)] = $value; return; } if(empty($name)) { return $_lang; } if(is_array($name)) { $_lang = array_merge($_lang,array_change_key_case($name)); return; } if(isset($_lang[strtolower($name)])) { return $_lang[strtolower($name)]; }else{ return false; } } function C($name='',$value=null) { static $_config = array(); if(!is_null($value)) { if(strpos($name,'.')) { $array = explode('.',strtolower($name)); $_config[$array[0]][$array[1]] = $value; }else{ $_config[strtolower($name)] = $value; } return ; } if(empty($name)) { return $_config; } if(is_array($name)) { $_config = array_merge($_config,array_change_key_case($name)); return $_config; } if(strpos($name,'.')) { $array = explode('.',strtolower($name)); return $_config[$array[0]][$array[1]]; }elseif(isset($_config[strtolower($name)])) { return $_config[strtolower($name)]; }else{ return NULL; } } function S($name,$value='',$expire='',$type='') { static $_cache = array(); import('Think.Util.Cache'); $cache = Cache::getInstance($type); if('' !== $value) { if(is_null($value)) { $result = $cache->rm($name); if($result) { unset($_cache[$type.'_'.$name]); } return $result; }else{ $cache->set($name,$value,$expire); $_cache[$type.'_'.$name] = $value; } return ; } if(isset($_cache[$type.'_'.$name])) { return $_cache[$type.'_'.$name]; } $value = $cache->get($name); $_cache[$type.'_'.$name] = $value; return $value; } function F($name,$value='',$expire=-1,$path=DATA_PATH) { static $_cache = array(); $filename = $path.$name.'.php'; if('' !== $value) { if(is_null($value)) { $result = unlink($filename); if($result) { unset($_cache[$name]); } return $result; }else{ $content = "<?php\nif (!defined('THINK_PATH')) exit();\n//".sprintf('%012d',$expire)."\nreturn ".var_export($value,true).";\n?>"; $result = file_put_contents($filename,$content); $_cache[$name] = $value; } return ; } if(isset($_cache[$name])) { return $_cache[$name]; } if(is_file($filename) && false !== $content = file_get_contents($filename)) { $expire = (int)substr($content,44, 12); if($expire != -1 && time() > filemtime($filename) + $expire) { unlink($filename); return false; } $str = substr($content,57,-2); $value = eval($str); $_cache[$name] = $value; }else{ $value = false; } return $value; } function I($class,$baseUrl = '',$ext='.class.php') { static $_class = array(); if(isset($_class[$baseUrl.$class])) { return $_class[$baseUrl.$class]; } $class_strut = explode(".",$class); $className = array_pop($class_strut); if($className != '*') { import($class,$baseUrl,$ext,false); if(class_exists($className)) { $_class[$baseUrl.$class] = new $className(); return $_class[$baseUrl.$class]; }else{ return false; } }else { return false; } } function xml_encode($data,$encoding='utf-8',$root="think") { $xml = '<?xml version="1.0" encoding="'.$encoding.'"?>'; $xml.= '<'.$root.'>'; $xml.= data_to_xml($data); $xml.= '</'.$root.'>'; return $xml; } function data_to_xml($data) { if(is_object($data)) { $data = get_object_vars($data); } $xml = ''; foreach($data as $key=>$val) { is_numeric($key) && $key="item id=\"$key\""; $xml.="<$key>"; $xml.=(is_array($val)||is_object($val))?data_to_xml($val):$val; list($key,)=explode(' ',$key); $xml.="</$key>"; } return $xml; } function mk_dir($dir, $mode = 0755) { if (is_dir($dir) || @mkdir($dir,$mode)) return true; if (!mk_dir(dirname($dir),$mode)) return false; return @mkdir($dir,$mode); } function clearCache($type=0,$path=NULL) { if(is_null($path)) { switch($type) { case 0: $path = CACHE_PATH; break; case 1: $path = TEMP_PATH; break; case 2: $path = LOG_PATH; break; case 3: $path = DATA_PATH; } } import("ORG.Io.Dir"); Dir::del($path); } ?><?php
 abstract class Base { public function __set($name ,$value) { if(property_exists($this,$name)){ $this->$name = $value; } } public function __get($name) { if(isset($this->$name)){ return $this->$name; }else { return null; } } }?><?php
 class ThinkException extends Exception { private $type; private $extra; public function __construct($message,$code=0,$extra=false) { parent::__construct($message,$code); $this->type = get_class($this); $this->extra = $extra; } public function __toString() { $trace = $this->getTrace(); if($this->extra) { array_shift($trace); } $this->class = $trace[0]['class']; $this->function = $trace[0]['function']; $this->file = $trace[0]['file']; $this->line = $trace[0]['line']; $file = file($this->file); $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")\n"; } $error['message'] = $this->message; $error['type'] = $this->type; $error['detail'] = L('_MODULE_').'['.MODULE_NAME.'] '.L('_ACTION_').'['.ACTION_NAME.']'."\n"; $error['detail'] .= ($this->line-2).': '.$file[$this->line-3]; $error['detail'] .= ($this->line-1).': '.$file[$this->line-2]; $error['detail'] .= '<font color="#FF6600" >'.($this->line).': <b>'.$file[$this->line-1].'</b></font>'; $error['detail'] .= ($this->line+1).': '.$file[$this->line]; $error['detail'] .= ($this->line+2).': '.$file[$this->line+1]; $error['class'] = $this->class; $error['function'] = $this->function; $error['file'] = $this->file; $error['line'] = $this->line; $error['trace'] = $traceInfo; $errorStr = "\n".L('_ERROR_INFO_')."[ ".APP_NAME.' '.MODULE_NAME.' '.ACTION_NAME.' ]'.$this->message."\n"; $errorStr .= L('_ERROR_URL_').WEB_URL.$_SERVER["PHP_SELF"]."\n"; $errorStr .= L('_ERROR_TYPE_').$this->type."\n"; $errorStr .= L('_ERROR_TRACE_')."\n".$traceInfo; Log::Write($errorStr); return $error ; } } ?><?php
 class Log extends Base { static $log = array(); static function record($message,$type=WEB_LOG_ERROR) { $now = date('[ y-m-d H:i:s ]'); self::$log[$type][] = "\r\n$now\r\n$message"; } static function save() { $day = date('y_m_d'); $_type = array( WEB_LOG_DEBUG => realpath(LOG_PATH).'/'.$day."_systemOut.log", SQL_LOG_DEBUG => realpath(LOG_PATH).'/'.$day."_systemSql.log", WEB_LOG_ERROR => realpath(LOG_PATH).'/'.$day."_systemErr.log", ); if(!is_writable(LOG_PATH)){ halt(L('_FILE_NOT_WRITEABLE_').':'.LOG_PATH); } foreach (self::$log as $type=>$logs){ $destination = $_type[$type]; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ){ rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log(implode('',$logs), FILE_LOG,$destination ); } clearstatcache(); } static function write($message,$type=WEB_LOG_ERROR,$file='') { $now = date('[ y-m-d H:i:s ]'); switch($type){ case WEB_LOG_DEBUG: $logType ='[调试]'; $destination = $file == ''? LOG_PATH.date('y_m_d')."_systemOut.log" : $file; break; case SQL_LOG_DEBUG: $logType ='[SQL]'; $destination = $file == ''? LOG_PATH.date('y_m_d')."_systemSql.log" : $file; break; case WEB_LOG_ERROR: $logType ='[错误]'; $destination = $file == ''? LOG_PATH.date('y_m_d')."_systemErr.log" : $file; break; } if(!is_writable(LOG_PATH)){ halt(L('_FILE_NOT_WRITEABLE_').':'.$destination); } if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ){ rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log("$now\r\n$message\r\n", FILE_LOG,$destination ); clearstatcache(); } }?><?php
 class App extends Base { protected $name ; protected $id; public function __construct($name='App',$id='') { $this->name = $name; $this->id = $id ; } public static function getInstance() { return get_instance_of(__CLASS__); } public function init() { set_error_handler(array(&$this,"appError")); set_exception_handler(array(&$this,"appException")); if(is_file(RUNTIME_PATH.'~app.php') && (!is_file(CONFIG_PATH.'config.php') || filemtime(RUNTIME_PATH.'~app.php')>filemtime(CONFIG_PATH.'config.php'))) { C(include RUNTIME_PATH.'~app.php'); }else{ $this->build(); } if(function_exists('date_default_timezone_set')) date_default_timezone_set(C('TIME_ZONE')); if('FILE' != strtoupper(C('SESSION_TYPE'))) { import("Think.Util.Filter"); Filter::load(ucwords(C('SESSION_TYPE')).'Session'); } session_start(); if($plugInOn = C('THINK_PLUGIN_ON')) { $this->loadPlugIn(); } if(C('DISPATCH_ON')) { if( 'Think'== C('DISPATCH_NAME') ) { import('Think.Util.Dispatcher'); Dispatcher::dispatch(); }elseif($plugInOn) { apply_filter('app_dispatch'); } } if(!defined('PHP_FILE')) { define('PHP_FILE',_PHP_FILE_); } if(!defined('MODULE_NAME')) define('MODULE_NAME', $this->getModule()); if(!defined('ACTION_NAME')) define('ACTION_NAME', $this->getAction()); if(file_exists(CMSMODULE_PATH.'Conf/'.MODULE_NAME.'.Conf.php')) { C(array_change_key_case(include CMSMODULE_PATH.'Conf/'.MODULE_NAME.'.Conf.php')); } if(file_exists(CMSMODULE_PATH.'Functions/'.MODULE_NAME.'.func.php')) { include CMSMODULE_PATH.'Functions/'.MODULE_NAME.'.func.php'; } if(C('LIMIT_RESFLESH_ON') && (!isset($_REQUEST[C('VAR_RESFLESH')]) || $_REQUEST[C('VAR_RESFLESH')]!="1")) { $guid = md5($_SERVER['PHP_SELF']); if(Cookie::is_set('_last_visit_time_'.$guid) && Cookie::get('_last_visit_time_'.$guid)>time()-C('LIMIT_REFLESH_TIMES')) { header('HTTP/1.1 304 Not Modified'); exit; }else{ Cookie::set('_last_visit_time_'.$guid,$_SERVER['REQUEST_TIME'],$_SERVER['REQUEST_TIME']+3600); header('Last-Modified:'.(date('D,d M Y H:i:s',$_SERVER['REQUEST_TIME']-C('LIMIT_REFLESH_TIMES'))).' GMT'); } } $this->checkLanguage(); $this->checkTemplate(); if(C('HTML_CACHE_ON')) { import('Think.Util.HtmlCache'); HtmlCache::readHTMLCache(); } if($plugInOn) { apply_filter('app_init'); } if(C('SHOW_RUN_TIME')){ $GLOBALS['_initTime'] = microtime(TRUE); } return ; } private function build() { C(array_change_key_case(include THINK_PATH.'/Common/convention.php')); if(file_exists_case(CONFIG_PATH.'config.php')) { C(array_change_key_case(include CONFIG_PATH.'config.php')); } if(file_exists_case(COMMON_PATH.'common.php')) { include COMMON_PATH.'common.php'; if(!C('DEBUG_MODE')) { if(defined('STRIP_RUNTIME_SPACE') && STRIP_RUNTIME_SPACE == false ) { $common = file_get_contents(COMMON_PATH.'common.php'); }else{ $common = php_strip_whitespace(COMMON_PATH.'common.php'); } if('?>' != substr(trim($common),-2)) { $common .= ' ?>'; } } } if(C('DEBUG_MODE')) { C(array_change_key_case(include THINK_PATH.'/Common/debug.php')); if(file_exists_case(CONFIG_PATH.'debug.php')) { C(array_change_key_case(include CONFIG_PATH.'debug.php')); } }else{ $content = $common."<?php\nreturn ".var_export(C(),true).";\n?>"; file_put_contents(RUNTIME_PATH.'~app.php',$content); } if(C('APP_AUTO_SETUP')) { if(file_exists_case(COMMON_PATH.'setup.php') && !is_file(APP_PATH.'install.ok')) { include COMMON_PATH.'setup.php'; file_put_contents(APP_PATH.'install.ok','install ok'); } } return ; } private function getModule() { $module = isset($_POST[C('VAR_MODULE')]) ? $_POST[C('VAR_MODULE')] : (isset($_GET[C('VAR_MODULE')])? $_GET[C('VAR_MODULE')]:''); if (empty($module)) $module = C('DEFAULT_MODULE'); if(strpos($module,C('COMPONENT_DEPR'))) { define('C_MODULE_NAME',$module); $array = explode(C('COMPONENT_DEPR'),$module); $module = array_pop($array); if(1==count($array)) { define('COMPONENT_NAME',$array[0]); }else{ define('COMPONENT_NAME',implode('/',$array)); } } if(C('MODULE_REDIRECT')) { $res = preg_replace('@(\w+):([^,\/]+)@e', '$modules[\'\\1\']="\\2";', C('MODULE_REDIRECT')); if(array_key_exists($module,$modules)) { define('P_MODULE_NAME',$module); $module = $modules[$module]; } } if(C('URL_CASE_INSENSITIVE')) { $module = ucwords(strtolower($module)); } unset($_POST[C('VAR_MODULE')],$_GET[C('VAR_MODULE')]); return $module; } private function getAction() { $action = isset($_POST[C('VAR_ACTION')]) ? $_POST[C('VAR_ACTION')] : (isset($_GET[C('VAR_ACTION')])?$_GET[C('VAR_ACTION')]:''); if (empty($action)) $action = C('DEFAULT_ACTION'); if(strpos($action,C('COMPONENT_DEPR'))) { define('C_ACTION_NAME',$action); $array = explode(C('COMPONENT_DEPR'),$action); $action = array_pop($array); } if(C('ACTION_REDIRECT')) { $res = preg_replace('@(\w+):([^,\/]+)@e', '$actions[\'\\1\']="\\2";', C('ACTION_REDIRECT')); if(array_key_exists($action,$actions)) { define('P_ACTION_NAME',$action); $action = $actions[$action]; } } unset($_POST[C('VAR_ACTION')],$_GET[C('VAR_ACTION')]); return $action; } private function checkLanguage() { if(C('LANG_SWITCH_ON')) { $defaultLang = C('DEFAULT_LANGUAGE'); if(isset($_GET[C('VAR_LANGUAGE')])) { $langSet = $_GET[C('VAR_LANGUAGE')]; Cookie::set('think_language',$langSet,time()+3600); }elseif ( Cookie::is_set('think_language') ) { $langSet = Cookie::get('think_language'); }else { if(C('AUTO_DETECT_LANG') && isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) { preg_match('/^([a-z\-]+)/i', $_SERVER['HTTP_ACCEPT_LANGUAGE'], $matches); $langSet = $matches[1]; Cookie::set('think_language',$langSet,time()+3600); }else{ $langSet = $defaultLang; } } define('LANG_SET',$langSet); if(C('LANG_CACHE_ON') && is_file(TEMP_PATH.MODULE_NAME.'_'.LANG_SET.'_lang.php')) { L(include TEMP_PATH.MODULE_NAME.'_'.LANG_SET.'_lang.php'); }else{ if (file_exists_case(THINK_PATH.'/Lang/'.LANG_SET.'.php')){ L(include THINK_PATH.'/Lang/'.LANG_SET.'.php'); }else{ L(include THINK_PATH.'/Lang/'.$defaultLang.'.php'); } if (file_exists_case(LANG_PATH.LANG_SET.'/common.php')) L(include LANG_PATH.LANG_SET.'/common.php'); if (file_exists_case(LANG_PATH.LANG_SET.'/'.strtolower(MODULE_NAME).'.php')) L(include LANG_PATH.LANG_SET.'/'.strtolower(MODULE_NAME).'.php'); if(C('LANG_CACHE_ON')) { $content = "<?php\nreturn ".var_export(L(),true).";\n?>"; file_put_contents(TEMP_PATH.MODULE_NAME.'_'.LANG_SET.'_lang.php',$content); } } }else{ L(include THINK_PATH.'/Lang/'.C('DEFAULT_LANGUAGE').'.php'); } return ; } private function checkTemplate() { if(C('TMPL_SWITCH_ON')) { $t = C('VAR_TEMPLATE'); if ( isset($_GET[$t]) ) { $templateSet = $_GET[$t]; Cookie::set('think_template',$templateSet,time()+3600); } else { if(Cookie::is_set('think_template')) { $templateSet = Cookie::get('think_template'); }else { $templateSet = C('DEFAULT_TEMPLATE'); Cookie::set('think_template',$templateSet,time()+3600); } } if (!is_dir(TMPL_PATH.$templateSet)) { $templateSet = C('DEFAULT_TEMPLATE'); } define('TEMPLATE_NAME',$templateSet); define('TEMPLATE_PATH',TMPL_PATH.TEMPLATE_NAME); $tmplDir = TMPL_DIR.'/'.TEMPLATE_NAME.'/'; }else{ define('TEMPLATE_PATH',TMPL_PATH); $tmplDir = TMPL_DIR.'/'; } define('__ROOT__',WEB_URL); define('__APP__',PHP_FILE); $module = defined('P_MODULE_NAME')?P_MODULE_NAME:MODULE_NAME; $action = defined('P_ACTION_NAME')?P_ACTION_NAME:ACTION_NAME; define('__SELF__',$_SERVER['PHP_SELF']); if(defined('C_MODULE_NAME')) { define('__URL__',PHP_FILE.'/'.C_MODULE_NAME); define('__ACTION__',__URL__.'/'.$action); C('TMPL_FILE_NAME',TEMPLATE_PATH.'/'.str_replace(C('COMPONENT_DEPR'),'/',C_MODULE_NAME).'/'.ACTION_NAME.C('TEMPLATE_SUFFIX')); define('__CURRENT__', WEB_URL.'/'.APP_NAME.'/'.$tmplDir.str_replace(C('COMPONENT_DEPR'),'/',C_MODULE_NAME)); }else{ define('__URL__',PHP_FILE.'/'.$module); define('__ACTION__',__URL__.'/'.$action); C('TMPL_FILE_NAME',TEMPLATE_PATH.'/'.MODULE_NAME.'/'.ACTION_NAME.C('TEMPLATE_SUFFIX')); define('__CURRENT__', WEB_URL.'/'.APP_NAME.'/'.$tmplDir.MODULE_NAME); } define('WEB_PUBLIC_URL', WEB_URL.'/Public'); if(C('APP_DOMAIN_DEPLOY')) { define('APP_TMPL_URL', '/'.$tmplDir); }else{ define('APP_TMPL_URL', WEB_URL.'/'.APP_NAME.'/'.$tmplDir); } define('APP_PUBLIC_URL', APP_TMPL_URL.'Public'); return ; } private function loadPlugIn() { include THINK_PATH.'/Common/plugin.php'; if(is_file(RUNTIME_PATH.'~plugins.php')) { include RUNTIME_PATH.'~plugins.php'; }else{ $common_plugins = get_plugins(THINK_PATH.'/PlugIns','Think'); $app_plugins = get_plugins(); $plugins = array_merge($common_plugins,$app_plugins); $content = ''; foreach($plugins as $key=>$file) { include $file; $content .= php_strip_whitespace($file); } file_put_contents(RUNTIME_PATH.'~plugins.php',$content); } return ; } public function exec() { $_autoload = C('AUTO_LOAD_CLASS'); if(!empty($_autoload)) { $import = explode(',',$_autoload); foreach ($import as $key=>$class){ import($class); } } if(defined('C_MODULE_NAME')) { $this->initComponent(); $module = A(C_MODULE_NAME); }else{ $module = A(MODULE_NAME); } if(!$module) { $module = A("Empty"); if(!$module) { throw_exception(L('_MODULE_NOT_EXIST_').MODULE_NAME); } } $action = ACTION_NAME.C('ACTION_SUFFIX'); if(defined('C_ACTION_NAME')) { $actionList = explode(C('COMPONENT_DEPR'),C_ACTION_NAME); foreach ($actionList as $action){ $module->$action(); } }else{ if (method_exists($module,'_before_'.$action)) { $module->{'_before_'.$action}(); } $module->{$action}(); if (method_exists($module,'_after_'.$action)) { $module->{'_after_'.$action}(); } } if(C('THINK_PLUGIN_ON')) { apply_filter('app_end'); } if(C('WEB_LOG_RECORD')) Log::save(); return ; } private function initComponent() { if(is_file(LIB_PATH.COMPONENT_NAME.'/Conf/config.php')) C(array_change_key_case(include LIB_PATH.COMPONENT_NAME.'/Conf/config.php')); if(is_file(LIB_PATH.COMPONENT_NAME.'/Common/common.php')) include LIB_PATH.COMPONENT_NAME.'/Common/common.php'; if (is_file(LIB_PATH.COMPONENT_NAME.'/Lang/'.LANG_SET.'.php')) L(include LIB_PATH.COMPONENT_NAME.'/Lang/'.LANG_SET.'.php'); } public function run() { $this->init(); $this->exec(); return ; } public function appException($e) { halt($e->__toString()); } public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_USER_ERROR: $errorStr = "错误：[$errno] $errstr ".basename($errfile)." 第 $errline 行.\n"; if(C('WEB_LOG_RECORD')){ Log::record($errorStr); Log::save(); } halt($errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "注意：[$errno] $errstr ".basename($errfile)." 第 $errline 行.\n"; Log::record($errorStr); break; } } };?><?php
 abstract class Action extends Base { protected $name; protected $view; protected $_cacheAction = array(); protected $error; public function __construct() { $this->view = View::getInstance(); $this->name = $this->getActionName(); if(C('USER_AUTH_ON')) { import('ORG.RBAC.RBAC'); if(!RBAC::AccessDecision()) { if(C('RBAC_ERROR_PAGE')) { redirect(C('RBAC_ERROR_PAGE')); }else{ if(C('GUEST_AUTH_ON')){ $this->assign('jumpUrl',PHP_FILE.C('USER_AUTH_GATEWAY')); } $this->error(L('_VALID_ACCESS_')); } } } if($this->isGet()) { if(C('ACTION_CACHE_ON') && in_array(ACTION_NAME,$this->_cacheAction,true)) { $content = S(md5(__SELF__)); if($content) { echo $content; exit; } } } if(method_exists($this,'_initialize')) { $this->_initialize(); } } protected function getActionName() { if(empty($this->name)) { $prefix = C('CONTR_CLASS_PREFIX'); $suffix = C('CONTR_CLASS_SUFFIX'); if($suffix) { $this->name = substr(substr(get_class($this),strlen($prefix)),0,-strlen($suffix)); }else{ $this->name = substr(get_class($this),strlen($prefix)); } } return $this->name; } protected function getParam($type,$name='',$filter='',$default='') { $Input = Input::getInstance(); $value = $Input->{$type}($name,$filter,$default); return $value; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if(strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])=='xmlhttprequest') return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) { return true; } return false; } protected function isPost() { return strtolower($_SERVER['REQUEST_METHOD']) == 'post'; } protected function isGet() { return strtolower($_SERVER['REQUEST_METHOD']) == 'get'; } protected function isHead() { return strtolower($_SERVER['REQUEST_METHOD']) == 'head'; } protected function isPut() { return strtolower($_SERVER['REQUEST_METHOD']) == 'put'; } protected function isDelete() { return strtolower($_SERVER['REQUEST_METHOD']) == 'delete'; } protected function cacheLockVersion($data) { $model = D($this->name); if($model->optimLock) { if(is_object($data)) $data = get_object_vars($data); if(isset($data[$model->optimLock]) && isset($data[$model->getPk()])) { $_SESSION[$model->getModelName().'_'.$data[$model->getPk()].'_lock_version'] = $data[$model->optimLock]; } } } protected function getModelClass() { $model = D($this->name); return $model; } protected function getReturnUrl() { return url(C('DEFAULT_ACTION')); } public function display($templateFile='',$charset='',$contentType='text/html',$varPrefix='') { if(C('ACTION_CACHE_ON') && in_array(ACTION_NAME,$this->_cacheAction,true)) { $content = $this->fetch($templateFile,$charset,$contentType,$varPrefix); S(md5(__SELF__),$content); echo $content; }else{ $this->view->display($templateFile,$charset,$contentType,$varPrefix); } } public function fetch($templateFile='',$charset='',$contentType='text/html',$varPrefix='') { return $this->view->fetch($templateFile,$charset,$contentType,$varPrefix,false); } public function layout($templateFile,$charset='',$contentType='text/html',$varPrefix='',$display=true) { return $this->view->layout($templateFile,$charset,$contentType,$varPrefix,$display); } public function assign($name,$value='') { $this->view->assign($name,$value); } public function trace($name,$value='') { $this->view->trace($name,$value); } public function get($name) { return $this->view->get($name); } public function __set($name,$value) { $this->assign($name,$value); } public function __get($name) { return $this->get($name); } public function __call($method,$parms) { if(strtolower($method) == strtolower(ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$parms); }else { if(file_exists_case(C('TMPL_FILE_NAME'))) { $this->display(); }else{ throw_exception(L('_ERROR_ACTION_').ACTION_NAME); } } } } public function error($errorMsg,$ajax=false) { if($ajax || $this->isAjax()) { $this->ajaxReturn('',$errorMsg,0); }else { $this->assign('error',$errorMsg); $this->forward(); } } public function success($message,$ajax=false) { if($ajax || $this->isAjax()) { $this->ajaxReturn('',$message,1); }else { $this->assign('message',$message); $this->forward(); } } public function ajaxReturn($data='',$info='',$status='',$type='') { if(C('WEB_LOG_RECORD') || C('SQL_DEBUG_LOG')) Log::save(); $result = array(); if($status === '') { $status = $this->get('error')?0:1; } if($info=='') { if($this->get('error')) { $info = $this->get('error'); }elseif($this->get('message')) { $info = $this->get('message'); } } $result['status'] = $status; $result['info'] = $info; $result['data'] = $data; if(empty($type)) $type = C('AJAX_RETURN_TYPE'); if(strtoupper($type)=='JSON') { header("Content-Type:text/html; charset=".C('OUTPUT_CHARSET')); exit(json_encode($result)); }elseif(strtoupper($type)=='XML'){ header("Content-Type:text/xml; charset=".C('OUTPUT_CHARSET')); exit(xml_encode($result)); }elseif(strtoupper($type)=='EVAL'){ header("Content-Type:text/html; charset=".C('OUTPUT_CHARSET')); exit($data); }else{ } } public function forward($action='_dispatch_jump',$module='',$app=APP_NAME,$exit=false,$delay=0) { if(!empty($delay)) { sleep(intval($delay)); } if(is_array($action)) { call_user_func($action); }else { if(empty($module)) { $module = defined('C_MODULE_NAME')?C_MODULE_NAME:MODULE_NAME; } if( MODULE_NAME!= $module) { $class = A($module,$app); call_user_func(array(&$class,$action)); }else { $this->{$action}(); } } if($exit) { exit(); }else { return ; } } public function redirect($action,$module='',$route='',$app=APP_NAME,$params=array(),$delay=0,$msg='') { if(empty($module)) { $module = defined('C_MODULE_NAME')?C_MODULE_NAME:MODULE_NAME; } $url = url($action,$module,$route,$app,$params); redirect($url,$delay,$msg); } private function _dispatch_jump() { if($this->isAjax() ) { if($this->get('_ajax_upload_')) { header("Content-Type:text/html; charset=".C('OUTPUT_CHARSET')); exit($this->get('_ajax_upload_')); }else { $this->ajaxReturn(); } } if($this->get('error') ) { $msgTitle = L('_OPERATION_FAIL_'); }else { $msgTitle = L('_OPERATION_SUCCESS_'); } $this->assign('msgTitle',$msgTitle); if($this->get('message')) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"1"); if(!$this->get('jumpUrl')) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); } if($this->get('error')) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"3"); if(!$this->get('jumpUrl')) $this->assign('jumpUrl',"javascript:history.back(-1);"); } if($this->get('closeWin')) { $this->assign('jumpUrl','javascript:window.close();'); } $this->display(C('ACTION_JUMP_TMPL')); exit ; } protected function _404($message='',$jumpUrl='',$waitSecond=3) { $this->assign('msg',$message); if(!empty($jumpUrl)) { $this->assign('jumpUrl',$jumpUrl); $this->assign('waitSecond',$waitSecond); } $this->display(C('ACTION_404_TMPL')); } protected function saveToken(){ $tokenType = C('TOKEN_TYPE'); $token = $tokenType(microtime(TRUE)); Session::set(C('TOKEN_NAME'),$token); } protected function isValidToken($reset=false){ $tokenName = C('TOKEN_NAME'); if($_REQUEST[$tokenName]==Session::get($tokenName)){ $valid=true; $this->saveToken(); }else { $valid=false; if($reset) $this->saveToken(); } return $valid; } }?><?php
 define('HAS_ONE',1); define('BELONGS_TO',2); define('HAS_MANY',3); define('MANY_TO_MANY',4); define('MUST_TO_VALIDATE',1); define('EXISTS_TO_VAILIDATE',0); define('VALUE_TO_VAILIDATE',2); class Model extends Base implements IteratorAggregate { protected $_db = array(); protected $db = null; protected $tablePrefix = ''; protected $tableSuffix = ''; protected $name = ''; protected $dbName = ''; protected $tableName = ''; protected $trueTableName =''; protected $fields = array(); protected $type = array(); protected $data = array(); protected $options = array(); protected $dataList = array(); protected $error = ''; protected $validateError = array(); protected $aggregation = array(); protected $composite = false; protected $viewModel = false; protected $optimLock = 'lock_version'; protected $pessimisticLock = false; protected $autoSaveRelations = false; protected $autoDelRelations = false; protected $autoAddRelations = false; protected $autoReadRelations = false; protected $lazyQuery = false; protected $autoCreateTimestamps = array('create_at','create_on','cTime'); protected $autoUpdateTimestamps = array('update_at','update_on','mTime'); protected $autoTimeFormat = ''; protected $blobFields = null; protected $blobValues = null; public function __construct($data='') { $this->_initialize(); $this->name = $this->getModelName(); if(!$this->composite) { import("Think.Db.Db"); if(!empty($this->connection)) { $this->db = Db::getInstance($this->connection); }else{ $this->db = Db::getInstance(); } $this->db->resultType = C('DATA_RESULT_TYPE'); $this->db->tableName = $this->parseName($this->name); $this->_db[0] = &$this->db; $this->tablePrefix = $this->tablePrefix?$this->tablePrefix:C('DB_PREFIX'); $this->tableSuffix = $this->tableSuffix?$this->tableSuffix:C('DB_SUFFIX'); $this->_checkTableInfo(); } if(!empty($data)) { $this->create($data); } } public static function getInstance() { return get_instance_of(__CLASS__); } public function __set($name,$value) { $this->data[$name] = $value; } public function __get($name) { if(isset($this->data[$name])) { return $this->data[$name]; }elseif(property_exists($this,$name)){ return $this->$name; }else{ return null; } } protected function parseName($name,$type=0) { if($type) { return preg_replace("/_([a-zA-Z])/e", "strtoupper('\\1')", $name); }else{ $name = preg_replace("/[A-Z]/", "_\\0", $name); return strtolower(trim($name, "_")); } } public function __call($method,$args) { if(strtolower(substr($method,0,5))=='getby') { $field = $this->parseName(substr($method,5)); if(in_array($field,$this->fields,true)) { array_unshift($args,$field); return call_user_func_array(array(&$this, 'getBy'), $args); } }elseif(strtolower(substr($method,0,6))=='getsby') { $field = $this->parseName(substr($method,6)); if(in_array($field,$this->fields,true)) { array_unshift($args,$field); return call_user_func_array(array(&$this, 'getByAll'), $args); } }elseif(strtolower(substr($method,0,3))=='get'){ $field = $this->parseName(substr($method,3)); return $this->__get($field); }elseif(strtolower(substr($method,0,3))=='top'){ $count = substr($method,3); array_unshift($args,$count); return call_user_func_array(array(&$this, 'topN'), $args); }elseif(strtolower(substr($method,0,5))=='setby'){ $field = $this->parseName(substr($method,5)); if(in_array($field,$this->fields,true)) { array_unshift($args,$field); return call_user_func_array(array(&$this, 'setField'), $args); } }elseif(strtolower(substr($method,0,3))=='set'){ $field = $this->parseName(substr($method,3)); array_unshift($args,$field); return call_user_func_array(array(&$this, '__set'), $args); }elseif(strtolower(substr($method,0,5))=='delby'){ $field = $this->parseName(substr($method,5)); if(in_array($field,$this->fields,true)) { array_unshift($args,$field); return call_user_func_array(array(&$this, 'deleteBy'), $args); } }elseif(strtolower(substr($method,0,3))=='del'){ $field = $this->parseName(substr($method,3)); if(in_array($field,$this->fields,true)) { if(isset($this->data[$field])) { unset($this->data[$field]); } } }elseif(strtolower(substr($method,0,8))=='relation'){ $type = strtoupper(substr($method,8)); if(in_array($type,array('ADD','SAVE','DEL'),true)) { array_unshift($args,$type); return call_user_func_array(array(&$this, 'opRelation'), $args); } }else{ throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } return; } protected function _initialize() {} private function _create(&$data,$autoLink=false,$multi=false,$lock=false,$fetchSql=false) { if(!$this->_before_create($data)) { return false; } $table = $this->getTableName(); if(!empty($this->options)) { $data = isset($this->options['data'])? $this->options['data']: $data; $lock = isset($this->options['lock'])? $this->options['lock']: $lock; $autoLink= isset($this->options['link'])? $this->options['link']: $autoLink; $table = isset($this->options['table'])? $this->options['table']: $this->getTableName(); $fetchSql = isset($this->options['fetch'])? $this->options['fetch']: $fetchSql; $this->options = array(); } if($fetchSql) { return $this->db->add($data,$this->getTableName(),$multi,$lock,$fetchSql); } if(false === $result = $this->db->add($data,$this->getTableName(),$multi)){ $this->error = L('_OPERATION_WRONG_'); return false; }else { $insertId = $this->getLastInsID(); if($insertId && !isset($data[$this->getPk()])) { $data[$this->getPk()] = $insertId; } $this->saveBlobFields($data); if ($this->autoAddRelations || $autoLink){ $this->opRelation('ADD',$data); } $this->_after_create($data); return $insertId ? $insertId : $result; } } protected function _before_create(&$data) {return true;} protected function _after_create(&$data) {} private function _update(&$data,$where='',$limit='',$order='',$autoLink=false,$lock=false,$fetchSql=false) { $table = $this->getTableName(); if(!empty($this->options)) { $where = isset($this->options['where'])? $this->options['where']: $where; $limit = isset($this->options['limit'])? $this->options['limit']: $limit; $order = isset($this->options['order'])? $this->options['order']: $order; $lock = isset($this->options['lock'])? $this->options['lock']: $lock; $autoLink= isset($this->options['link'])? $this->options['link']: $autoLink; $table = isset($this->options['table'])? $this->options['table']: $this->getTableName(); $fetchSql = isset($this->options['fetch'])? $this->options['fetch']: $fetchSql; $this->options = array(); } if(!$this->_before_update($data,$where)) { return false; } $lock = ($this->pessimisticLock || $lock); if($this->viewModel) { $where = $this->checkCondition($where); } if($fetchSql) { return $this->db->save($data,$table,$where,$limit,$order,$lock,true); } if(false ===$this->db->save($data,$table,$where,$limit,$order,$lock) ){ $this->error = L('_OPERATION_WRONG_'); return false; }else { $this->saveBlobFields($data); if ($this->autoSaveRelations || $autoLink){ $this->opRelation('SAVE',$data); } $this->_after_update($data,$where); return true; } } protected function _before_update(&$data,$where) {return true;} protected function _after_update(&$data,$where) {} private function _read($condition='',$fields='*',$all=false,$order='',$limit='',$group='',$having='',$join='',$cache=false,$relation=false,$lazy=false,$lock=false,$fetchSql=false) { $table = $this->getTableName(); if(!empty($this->options)) { $condition = isset($this->options['where'])? $this->options['where']: $condition; $table = isset($this->options['table'])? $this->options['table']: $this->getTableName(); $fields = isset($this->options['field'])? $this->options['field']: $fields; $limit = isset($this->options['limit'])? $this->options['limit']: $limit; $order = isset($this->options['order'])? $this->options['order']: $order; $group = isset($this->options['group'])? $this->options['group']: $group; $having = isset($this->options['having'])? $this->options['having']: $having; $join = isset($this->options['join'])? $this->options['join']: $join; $cache = isset($this->options['cache'])? $this->options['cache']: $cache; $lock = isset($this->options['lock'])? $this->options['lock']: $lock; $lazy = isset($this->options['lazy'])? $this->options['lazy']: $lazy; $relation = isset($this->options['link'])? $this->options['link']: $relation; $fetchSql = isset($this->options['fetch'])? $this->options['fetch']: $fetchSql; $this->options = array(); } if(!$this->_before_read($condition)) { return false; } if($cache) { if($all) { $identify = $this->name.'List_'.to_guid_string(func_get_args()); }else{ $identify = $this->name.'_'.to_guid_string($condition); } $result = S($identify); if(false !== $result) { if(!$all) { $this->cacheLockVersion($result); } $this->_after_read($condition,$result); return $result; } } if($this->viewModel) { $condition = $this->checkCondition($condition); $fields = $this->checkFields($fields); $order = $this->checkOrder($order); $group = $this->checkGroup($group); } $lazy = ($this->lazyQuery || $lazy); $lock = ($this->pessimisticLock || $lock); if($fetchSql) { return $this->db->find($condition,$table,$fields,$order,$limit,$group,$having,$join,$cache,$lazy,$lock,true); } $rs = $this->db->find($condition,$table,$fields,$order,$limit,$group,$having,$join,$cache,$lazy,$lock); $result = $this->rsToVo($rs,$all,0,$relation); $this->_after_read($condition,$result); if($result && $cache) { S($identify,$result); } return $result; } protected function _before_read(&$condition) {return true;} protected function _after_read(&$condition,$result) {} private function _delete($data,$where='',$limit=0,$order='',$autoLink=false,$lock=false,$fetchSql=false) { $table = $this->getTableName(); if(!empty($this->options)) { $where = isset($this->options['where'])? $this->options['where']: $where; $table = isset($this->options['table'])? $this->options['table']: $this->getTableName(); $limit = isset($this->options['limit'])? $this->options['limit']: $limit; $order = isset($this->options['order'])? $this->options['order']: $order; $lock = isset($this->options['lock'])? $this->options['lock']: $lock; $autoLink = isset($this->options['link'])? $this->options['link']: $autoLink; $fetchSql = isset($this->options['fetch'])? $this->options['fetch']: $fetchSql; $this->options = array(); } if(!$this->_before_delete($where)) { return false; } if($this->viewModel) { $where = $this->checkCondition($where); } if($fetchSql) { return $this->db->remove($where,$table,$limit,$order,$lock,true); } $result= $this->db->remove($where,$table,$limit,$order,$lock); if(false === $result ){ $this->error = L('_OPERATION_WRONG_'); return false; }else { $this->delBlobFields($data); if ($this->autoDelRelations || $autoLink){ $this->opRelation('DEL',$data); } $this->_after_delete($where); return $result; } } protected function _before_delete(&$where) {return true;} protected function _after_delete(&$where) {} private function _query($sql='',$cache=false,$lazy=false,$lock=false,$fetchSql=false) { if(!empty($this->options)) { $sql = isset($this->options['sql'])? $this->options['sql']: $sql; $cache = isset($this->options['cache'])? $this->options['cache']: $cache; $lazy = isset($this->options['lazy'])? $this->options['lazy']: $lazy; $lock = isset($this->options['lock'])? $this->options['lock']: $lock; $fetchSql = isset($this->options['fetch'])? $this->options['fetch']: $fetchSql; $this->options = array(); } if(!$this->_before_query($sql)) { return false; } if($cache) { $identify = md5($sql); $result = S($identify); if(false !== $result) { return $result; } } $lazy = ($this->lazyQuery || $lazy); $lock = ($this->pessimisticLock || $lock); if($fetchSql) { return $this->db->query($sql,$cache,$lazy,$lock,$fetchSql); } $result = $this->db->query($sql,$cache,$lazy,$lock); if($cache) S($identify,$result); $this->_after_query($result); return $result; } protected function _before_query(&$sql) {return true;} protected function _after_query(&$result) {} private function _checkTableInfo() { if(empty($this->fields) && strtolower(get_class($this))!='model') { if(C('DB_FIELDS_CACHE')) { $identify = $this->name.'_fields'; $this->fields = F($identify); if(!$this->fields) { $this->flush(); } }else{ $this->flush(); } } } public function flush() { if($this->viewModel) { $this->fields = array(); $this->fields['_autoInc'] = false; foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; foreach ($val as $key=>$field){ if(is_numeric($key)) { $this->fields[] = $k.'.'.$field; }else{ $this->fields[] = $k.'.'.$key; } } } }else{ $fields = $this->db->getFields($this->getTableName()); $this->fields = array_keys($fields); $this->fields['_autoInc'] = false; foreach ($fields as $key=>$val){ $this->type[$key] = $val['type']; if($val['primary']) { $this->fields['_pk'] = $key; if($val['autoInc']) $this->fields['_autoInc'] = true; } } } if(C('DB_FIELDS_CACHE')) { $identify = $this->name.'_fields'; F($identify,$this->fields); } } public function filterFields(&$result) { if(!empty($this->_filter)) { foreach ($this->_filter as $field=>$filter){ $fun = $filter[1]; if(isset($filter[2]) && $filter[2]){ if(is_array($result)) { $result[$field] = call_user_func($fun,$result); }else{ $result->$field = call_user_func($fun,$result); } }else{ if(is_array($result) && isset($result[$field])) { $result[$field] = call_user_func($fun,$result[$field]); }elseif(isset($result->$field)){ $result->$field = call_user_func($fun,$result->$field); } } } } return $result; } public function filterListFields(&$resultSet) { if(!empty($this->_filter)) { foreach ($resultSet as $key=>$result){ $resultSet[$key] = $this->filterFields($result); } } } public function getListBlobFields(&$resultSet,$field='') { if(!empty($this->blobFields)) { foreach ($resultSet as $key=>$result){ $result = $this->getBlobFields($result,$field); $resultSet[$key] = $result; } } } public function getBlobFields(&$data,$field='') { if(!empty($this->blobFields)) { $pk = $this->getPk(); $id = is_array($data)?$data[$pk]:$data->$pk; if(empty($field)) { foreach ($this->blobFields as $field){ if($this->viewModel) { $identify = $this->masterModel.'_'.$id.'_'.$field; }else{ $identify = $this->name.'_'.$id.'_'.$field; } if(is_array($data)) { $data[$field] = F($identify); }else{ $data->$field = F($identify); } } return $data; }else{ $identify = $this->name.'_'.$id.'_'.$field; return F($identify); } } } public function saveBlobFields(&$data) { if(!empty($this->blobFields)) { foreach ($this->blobValues as $key=>$val){ if(strpos($key,'@@_?id_@@')) { $key = str_replace('@@_?id_@@',$data[$this->getPk()],$key); } F($key,$val); } } } public function delBlobFields(&$data,$field='') { if(!empty($this->blobFields)) { $pk = $this->getPk(); $id = is_array($data)?$data[$pk]:$data->$pk; if(empty($field)) { foreach ($this->blobFields as $field){ $identify = $this->name.'_'.$id.'_'.$field; F($identify,null); } }else{ $identify = $this->name.'_'.$id.'_'.$field; F($identify,null); } } } public function getIterator() { if(!empty($this->dataList)) { return new ArrayObject($this->dataList); }elseif(!empty($this->data)){ return new ArrayObject($this->data); }else{ $fields = $this->fields; unset($fields['_pk'],$fields['_autoInc']); return new ArrayObject($fields); } } public function toArray() { if(!empty($this->dataList)) { return $this->dataList; }elseif (!empty($this->data)){ return $this->data; } return false; } public function add($data=null,$autoLink=false,$multi=false) { if(empty($data)) { if(!empty($this->options['data'])) { $data = $this->options['data']; }elseif(!empty($this->data)) { $data = $this->data; }elseif(!empty($this->dataList)){ return $this->addAll($this->dataList); }else{ $this->error = L('_DATA_TYPE_INVALID_'); return false; } } $data = $this->_facade($data); if(!$data) { $this->error = L('_DATA_TYPE_INVALID_'); return false; } if($this->optimLock && !isset($data[$this->optimLock]) ) { if(in_array($this->optimLock,$this->fields,true)) { $data[$this->optimLock] = 0; } } return $this->_create($data,$autoLink); } protected function _facade($data) { if(is_instance_of($data,'HashMap')){ $data = $data->toArray(); }elseif(is_object($data)) { $data = get_object_vars($data); }elseif(is_string($data)){ parse_str($data,$data); }elseif(!is_array($data)){ return false; } if(!empty($this->aggregation)) { foreach ($this->aggregation as $name){ if(is_array($name)) { $fields = $name[1]; $name = $name[0]; if(is_string($fields)) $fields = explode(',',$fields); } if(!empty($data[$name])) { $combine = (array)$data[$name]; if(!empty($fields)) { foreach ($fields as $key=>$field){ if(is_int($key)) $key = $field; if(isset($combine[$key])) { $data[$field] = $combine[$key]; } } }else{ $data = $data+$combine; } unset($data[$name]); } } } foreach ($data as $key=>$val){ if(!$this->viewModel && empty($this->_link)) { if(!in_array($key,$this->fields,true)) { unset($data[$key]); } } } if(!empty($this->blobFields)) { foreach ($this->blobFields as $field){ if(isset($data[$field])) { if(isset($data[$this->getPk()])) { $this->blobValues[$this->name.'_'.$data[$this->getPk()].'_'.$field] = $data[$field]; }else{ $this->blobValues[$this->name.'_@@_?id_@@_'.$field] = $data[$field]; } unset($data[$field]); } } } if(!empty($this->_filter)) { foreach ($this->_filter as $field=>$filter){ if(isset($data[$field])) { $fun = $filter[0]; if(isset($filter[2]) && $filter[2]) { $data[$field] = call_user_func($fun,$data); }else{ $data[$field] = call_user_func($fun,$data[$field]); } } } } if(isset($this->_map)) { foreach ($this->_map as $key=>$val){ if(isset($data[$key]) && $key != $val ) { $data[$val] = $data[$key]; unset($data[$key]); } } } return $data; } public function checkCondition($data) { if((empty($data) || (is_instance_of($data,'HashMap') && $data->isEmpty())) && !empty($this->viewCondition)) { $data = $this->viewCondition; }elseif(!is_string($data)) { $data = $this->_facade($data); $baseCondition = empty($this->viewCondition)?array():$this->viewCondition; $view = array(); foreach ($this->viewFields as $key=>$val){ $k = isset($val['_as'])?$val['_as']:$key; foreach ($data as $name=>$value){ if(false !== $field = array_search($name,$val)) { if(is_numeric($field)) { $_key = $k.'.'.$name; }else{ $_key = $k.'.'.$field; } $view[$_key] = $value; unset($data[$name]); if(is_array($baseCondition) && isset($baseCondition[$_key])) { $view[$_key.','.$_key] = array($value,$baseCondition[$_key]); unset($baseCondition[$_key]); unset($view[$_key]); } } } } $data = array_merge($data,$baseCondition,$view); } return $data; } public function checkFields($fields) { if(empty($fields) || '*'==$fields ) { $fields = array(); foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; foreach ($val as $key=>$field){ if(is_numeric($key)) { $fields[] = $k.'.'.$field.' AS '.$field; }elseif('_' != substr($key,0,1)) { if( false !== strpos($key,'*') || false !== strpos($key,'(') || false !== strpos($key,'.')) { $fields[] = $key.' AS '.$field; }else{ $fields[] = $k.'.'.$key.' AS '.$field; } } } } }else{ if(!is_array($fields)) { $fields = explode(',',$fields); } foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; foreach ($fields as $key=>$field){ if(false !== $_field = array_search($field,$val)) { if(is_numeric($_field)) { $fields[] = $k.'.'.$field.' AS '.$field; }else{ if( false !== strpos($_field,'*') || false !== strpos($_field,'(') || false !== strpos($_field,'.')) { $fields[] = $_field.' AS '.$field; }else{ $fields[] = $k.'.'.$_field.' AS '.$field; } } } } } } $fields = implode(',',$fields); return $fields; } public function checkOrder($order) { if(!empty($order)) { $orders = explode(',',$order); $_order = array(); foreach ($orders as $order){ $array = explode(' ',$order); $field = $array[0]; $sort = isset($array[1])?$array[1]:'ASC'; foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; if(false !== $_field = array_search($field,$val)) { if(is_numeric($_field)) { $field = $k.'.'.$field; }else{ $field = $k.'.'.$_field; } break; } } $_order[] = $field.' '.$sort; } $order = implode(',',$_order); } return $order; } public function checkGroup($group) { if(!empty($group)) { $groups = explode(',',$group); $_group = array(); foreach ($groups as $group){ $array = explode(' ',$group); $field = $array[0]; $sort = isset($array[1])?$array[1]:''; foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; if(false !== $_field = array_search($field,$val)) { if(is_numeric($_field)) { $field = $k.'.'.$field; }else{ $field = $k.'.'.$_field; } break; } } $_group[$field] = $field.' '.$sort; } $group = $_group; } return $group; } public function addAll($dataList='',$autoLink=false) { if(empty($dataList)) { $dataList = $this->dataList; }elseif(!is_array($dataList)) { $this->error = L('_DATA_TYPE_INVALID_'); return false; } return $this->_create($dataList,$autoLink,true); } public function save($data=null,$where='',$autoLink=false,$limit=0,$order='') { if(empty($data)) { if(!empty($this->options['data'])) { $data = $this->options['data']; }elseif(!empty($this->data)) { $data = $this->data; }elseif(!empty($this->dataList)){ $data = $this->dataList; $this->startTrans(); foreach ($data as $val){ $result = $this->save($val,$where,$autoLink); } $this->commit(); return $result; } } $data = $this->_facade($data); if(!$data) { $this->error = L('_DATA_TYPE_INVALID_'); return false; } if(!$this->checkLockVersion($data,$where)) { $this->error = L('_RECORD_HAS_UPDATE_'); return false; } $pk = $this->getPk(); if(empty($where) && isset($data[$pk]) && !is_array($data[$pk])) { $where = $pk."=".$data[$pk]; unset($data[$pk]); } return $this->_update($data,$where,$limit,$order,$autoLink); } protected function checkLockVersion(&$data,$where='') { $pk = $this->getPk(); if(isset($data[$pk])) { $where = $pk."=".$data[$pk]; $guid = $data[$pk]; }else{ $guid = to_guid_string($where); } $identify = $this->name.'_'.$guid.'_lock_version'; if($this->optimLock && isset($_SESSION[$identify])) { $lock_version = $_SESSION[$identify]; if(!empty($where)) { $vo = $this->find($where,$this->optimLock); }else { $vo = $this->find($data,$this->optimLock); } $_SESSION[$identify] = $lock_version; $curr_version = is_array($vo)?$vo[$this->optimLock]:$vo->{$this->optimLock}; if(isset($curr_version)) { if($curr_version>0 && $lock_version != $curr_version) { return false; }else{ $save_version = $data[$this->optimLock]; if($save_version != $lock_version+1) { $data[$this->optimLock] = $lock_version+1; } $_SESSION[$identify] = $lock_version+1; } } } return true; } public function getRelation(&$result,$name='',$return=false) { if(!empty($this->_link)) { foreach($this->_link as $key=>$val) { $mappingName = !empty($val['mapping_name'])?$val['mapping_name']:$key; if(empty($name) || $mappingName == $name) { $mappingType = !empty($val['mapping_type'])?$val['mapping_type']:$val; $mappingClass = !empty($val['class_name'])?$val['class_name']:$key; $mappingFields = !empty($val['mapping_fields'])?$val['mapping_fields']:'*'; $mappingCondition = !empty($val['condition'])?$val['condition']:'1=1'; if(strtoupper($mappingClass)==strtoupper($this->name)) { $mappingFk = !empty($val['parent_key'])? $val['parent_key'] : 'parent_id'; }else{ $mappingFk = !empty($val['foreign_key'])?$val['foreign_key']:strtolower($this->name).'_id'; } $model = D($mappingClass); switch($mappingType) { case HAS_ONE: $pk = is_array($result)?$result[$this->getPk()]:$result->{$this->getPk()}; $mappingCondition .= " AND {$mappingFk}='{$pk}'"; $relationData = $model->find($mappingCondition,$mappingFields,false,false); if(isset($val['as_fields'])) { $fields = explode(',',$val['as_fields']); foreach ($fields as $field){ $fieldAs = explode(':',$field); if(count($fieldAs)>1) { $fieldFrom = $fieldAs[0]; $fieldTo = $fieldAs[1]; }else{ $fieldFrom = $field; $fieldTo = $field; } $fieldVal = is_array($relationData)?$relationData[$fieldFrom]:$relationData->$fieldFrom; if(isset($fieldVal)) { if(is_array($result)) { $result[$fieldTo] = $fieldVal; }else{ $result->$fieldTo = $fieldVal; } } } unset($relationData); } break; case BELONGS_TO: if(strtoupper($mappingClass)==strtoupper($this->name)) { $mappingFk = !empty($val['parent_key'])? $val['parent_key'] : 'parent_id'; }else{ $mappingFk = !empty($val['foreign_key'])?$val['foreign_key']:strtolower($model->name).'_id'; } $fk = is_array($result)?$result[$mappingFk]:$result->{$mappingFk}; $mappingCondition .= " AND {$model->getPk()}='{$fk}'"; $relationData = $model->find($mappingCondition,$mappingFields,false,false); if(isset($val['as_fields'])) { $fields = explode(',',$val['as_fields']); foreach ($fields as $field){ $fieldAs = explode(':',$field); if(count($fieldAs)>1) { $fieldFrom = $fieldAs[0]; $fieldTo = $fieldAs[1]; }else{ $fieldFrom = $field; $fieldTo = $field; } $fieldVal = is_array($relationData)?$relationData[$fieldFrom]:$relationData->$fieldFrom; if(isset($fieldVal)) { if(is_array($result)) { $result[$fieldTo] = $fieldVal; }else{ $result->$fieldTo = $fieldVal; } } } unset($relationData); } break; case HAS_MANY: $pk = is_array($result)?$result[$this->getPk()]:$result->{$this->getPk()}; $mappingCondition .= " AND {$mappingFk}='{$pk}'"; $mappingOrder = !empty($val['mapping_order'])?$val['mapping_order']:''; $mappingLimit = !empty($val['mapping_limit'])?$val['mapping_limit']:''; $relationData = $model->findAll($mappingCondition,$mappingFields,$mappingOrder,$mappingLimit); break; case MANY_TO_MANY: $pk = is_array($result)?$result[$this->getPk()]:$result->{$this->getPk()}; $mappingCondition = " {$mappingFk}='{$pk}'"; $mappingOrder = $val['mapping_order']; $mappingLimit = $val['mapping_limit']; $mappingRelationFk = $val['relation_foreign_key']?$val['relation_foreign_key']:$model->name.'_id'; $mappingRelationTable = $val['relation_table']?$val['relation_table']:$this->getRelationTableName($model); $sql = "SELECT b.{$mappingFields} FROM {$mappingRelationTable} AS a, ".$model->getTableName()." AS b WHERE a.{$mappingRelationFk} = b.{$model->getPk()} AND a.{$mappingCondition}"; if(!empty($val['condition'])) { $sql .= ' AND '.$val['condition']; } if(!empty($mappingOrder)) { $sql .= ' ORDER BY '.$mappingOrder; } if(!empty($mappingLimit)) { $sql .= ' LIMIT '.$mappingLimit; } $relationData = $this->_query($sql); break; } if(!$return){ if(!isset($val['as_fields'])) { if(is_array($result)) { $result[$mappingName] = $relationData; }else{ $result->$mappingName = $relationData; } } }else{ return $relationData; } } } } return $result; } public function getRelations(&$resultSet,$name='') { foreach($resultSet as $key=>$val) { $val = $this->getRelation($val,$name); $resultSet[$key] = $val; } return $resultSet; } public function opRelation($opType,$data='',$name='') { $result = false; if(is_instance_of($data,'HashMap')){ $data = $data->toArray(); }elseif(is_object($data)){ $data = get_object_vars($data); }elseif(empty($data) && !empty($this->data)){ $data = $this->data; }elseif(!is_array($data)){ return false; } if(!empty($this->_link)) { foreach($this->_link as $key=>$val) { $mappingName = $val['mapping_name']?$val['mapping_name']:$key; if(empty($name) || $mappingName == $name) { $mappingType = !empty($val['mapping_type'])?$val['mapping_type']:$val; $mappingClass = !empty($val['class_name'])?$val['class_name']:$key; $pk = $data[$this->getPk()]; if(strtoupper($mappingClass)==strtoupper($this->name)) { $mappingFk = !empty($val['parent_key'])? $val['parent_key'] : 'parent_id'; }else{ $mappingFk = !empty($val['foreign_key'])?$val['foreign_key']:strtolower($this->name).'_id'; } if(empty($val['condition'])) { $mappingCondition = "{$mappingFk}='{$pk}'"; } $model = D($mappingClass); $mappingData = $data[$mappingName]; if(is_object($mappingData)){ $mappingData = get_object_vars($mappingData); } if(!empty($mappingData) || $opType == 'DEL') { switch($mappingType) { case HAS_ONE: switch (strtoupper($opType)){ case 'ADD': $mappingData[$mappingFk] = $pk; $result = $model->add($mappingData,false); break; case 'SAVE': $result = $model->save($mappingData,$mappingCondition,false); break; case 'DEL': $result = $model->delete($mappingCondition,'','',false); break; } break; case BELONGS_TO: break; case HAS_MANY: switch (strtoupper($opType)){ case 'ADD' : $model->startTrans(); foreach ($mappingData as $val){ $val[$mappingFk] = $pk; $result = $model->add($val,false); } $model->commit(); break; case 'SAVE' : $model->startTrans(); $pk = $model->getPk(); foreach ($mappingData as $vo){ $mappingCondition = "$pk ={$vo[$pk]}"; $result = $model->save($vo,$mappingCondition,false); } $model->commit(); break; case 'DEL' : $result = $model->delete($mappingCondition,'','',false); break; } break; case MANY_TO_MANY: $mappingRelationFk = $val['relation_foreign_key']?$val['relation_foreign_key']:$model->name.'_id'; $mappingRelationTable = $val['relation_table']?$val['relation_table']:$this->getRelationTableName($model); foreach ($mappingData as $vo){ $relationId[] = $vo[$model->getPk()]; } $relationId = implode(',',$relationId); switch (strtoupper($opType)){ case 'ADD': case 'SAVE': $this->startTrans(); $this->db->remove($mappingCondition,$mappingRelationTable); $sql = 'INSERT INTO '.$mappingRelationTable.' ('.$mappingFk.','.$mappingRelationFk.') SELECT a.'.$this->getPk().',b.'.$model->getPk().' FROM '.$this->getTableName().' AS a ,'.$model->getTableName()." AS b where a.".$this->getPk().' ='. $pk.' AND  b.'.$model->getPk().' IN ('.$relationId.") "; $result = $model->execute($sql); if($result) { $this->commit(); }else { $this->rollback(); } break; case 'DEL': $result = $this->db->remove($mappingCondition,$mappingRelationTable); break; } break; } } } } } return $result; } public function deleteById($id,$autoLink=false) { $pk = $this->getPk(); return $this->_delete(array($pk=>$id),$pk."='$id'",0,'',$autoLink); } public function deleteByIds($ids,$limit='',$order='',$autoLink=false) { if(is_array($ids)) { $ids = implode(',',$ids); } return $this->_delete(false,$this->getPk()." IN ($ids)",$limit,$order,$autoLink); } public function deleteBy($field,$value,$limit='',$order='',$autoLink=false) { $condition[$field] = $value; return $this->_delete(false,$condition,$limit,$order,$autoLink); } public function delete($data=null,$limit='',$order='',$autoLink=false) { if(preg_match('/^\d+(\,\d+)*$/',$data)) { return $this->deleteByIds($data,$limit,$order,$autoLink); } if(empty($data)) { $data = $this->data; } $pk = $this->getPk(); if(is_array($data) && isset($data[$pk]) && !is_array($data[$pk])) { $data = $this->_facade($data); $where = $pk."=".$data[$pk]; }else { $where = $data; } return $this->_delete($data,$where,$limit,$order,$autoLink); } public function deleteAll($condition='',$autoLink=false) { if(is_instance_of($condition,'HashMap')) { $condition = $condition->toArray(); }elseif(empty($condition) && !empty($this->dataList)){ $id = array(); foreach ($this->dataList as $data){ $data = (array)$data; $id[] = $data[$this->getPk()]; } $ids = implode(',',$id); $condition = $this->getPk().' IN ('.$ids.')'; } return $this->_delete(false,$condition,0,'',$autoLink); } public function getById($id,$fields='*',$cache=false,$relation=false,$lazy=false) { return $this->_read($this->getPk()."='{$id}'",$fields,false,null,null,null,null,null,$cache,$relation,$lazy); } public function getByIds($ids,$fields='*',$order='',$limit='',$cache=false,$relation=false,$lazy=false) { if(is_array($ids)) { $ids = implode(',',$ids); } return $this->_read($this->getPk()." IN ({$ids})",$fields,true,$order,$limit,null,null,$cache,$relation,$lazy); } public function getBy($field,$value,$fields='*',$cache=false,$relation=false,$lazy=false) { $condition[$field] = $value; return $this->_read($condition,$fields,false,null,null,null,null,null,$cache,$relation,$lazy); } public function getByAll($field,$value,$fields='*',$cache=false,$relation=false,$lazy=true) { $condition[$field] = $value; return $this->_read($condition,$fields,true,null,null,null,null,null,$cache,$relation,$lazy); } public function find($condition='',$fields='*',$cache=false,$relation=false,$lazy=false) { if(is_numeric($condition)) { return $this->getById($condition,$fields,$cache,$relation,$lazy); } return $this->_read($condition,$fields,false,null,null,null,null,null,$cache,$relation,$lazy); } public function xFind($condition='',$fields='*',$cache=false,$lazy=false) { return $this->find($condition,$fields,$cache,true,$lazy); } public function findAll($condition='',$fields='*',$order='',$limit='',$group='',$having='',$join='',$cache=false,$relation=false,$lazy=false) { if(is_string($condition) && preg_match('/^\d+(\,\d+)+$/',$condition)) { return $this->getByIds($condition,$fields,$order,$limit,$cache,$relation,$lazy); } return $this->_read($condition,$fields,true,$order,$limit,$group,$having,$join,$cache,$relation,$lazy); } public function xFindAll($condition='',$fields='*',$order='',$limit='',$group='',$having='',$join='',$cache=false) { return $this->findAll($condition,$fields,$order,$limit,$group,$having,$join,$cache,true,false); } public function topN($count,$condition='',$fields='*',$order='',$group='',$having='',$join='',$cache=false,$relation=false,$lazy=false) { return $this->findAll($condition,$fields,$order,$count,$group,$having,$join,$cache,$relation,$lazy); } public function query($sql,$cache=false,$lazy=false) { if(empty($sql) && !empty($this->options['sql'])) { $sql = $this->options['sql']; } if(is_array($sql)) { return $this->patchQuery($sql); } if(!empty($sql)) { if(strpos($sql,'__TABLE__')) { $sql = str_replace('__TABLE__',$this->getTableName(),$sql); } return $this->_query($sql,$cache,$lazy); }else{ return false; } } public function execute($sql='') { if(empty($sql) && !empty($this->options['sql'])) { $sql = $this->options['sql']; } if(!empty($sql)) { if(strpos($sql,'__TABLE__')) { $sql = str_replace('__TABLE__',$this->getTableName(),$sql); } $result = $this->db->execute($sql); return $result; }else { return false; } } public function patchQuery($sql=array()) { if(!is_array($sql)) { return false; } $this->startTrans(); foreach ($sql as $_sql){ $result = $this->execute($_sql); if(false === $result) { $this->rollback(); return false; } } $this->commit(); return true; } public function getField($field,$condition='') { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } if($this->viewModel) { $condition = $this->checkCondition($condition); $field = $this->checkFields($field); } $rs = $this->db->find($condition,$this->getTableName(),$field); return $this->getCol($rs,$field); } public function getFields($field,$condition='',$sepa=' ') { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } if($this->viewModel) { $condition = $this->checkCondition($condition); $field = $this->checkFields($field); } $rs = $this->db->find($condition,$this->getTableName(),$field); return $this->getCols($rs,$field,$sepa); } public function setField($field,$value,$condition='',$asString=true) { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } if($this->viewModel) { $condition = $this->checkCondition($condition); $field = $this->checkFields($field); } return $this->db->setField($field,$value,$this->getTableName(),$condition,$asString); } public function setInc($field,$condition='',$step=1) { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } if($this->viewModel) { $condition = $this->checkCondition($condition); $field = $this->checkFields($field); } return $this->db->setInc($field,$this->getTableName(),$condition,$step); } public function setDec($field,$condition='',$step=1) { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } if($this->viewModel) { $condition = $this->checkCondition($condition); $field = $this->checkFields($field); } return $this->db->setDec($field,$this->getTableName(),$condition,$step); } public function getCol($rs,$field) { if(!empty($rs) && count($rs)>0) { $result = $rs[0]; $field = is_array($result)?$result[$field]:$result->$field; return $field; }else { return null; } } protected function getFirstCol($rs) { if(!empty($rs) && count($rs)>0) { $result = $rs[0]; if(is_object($result)) { $result = get_object_vars($result); } return reset($result); }else { return null; } } public function getCols($rs,$field,$sepa=' ') { if(!empty($rs)) { $field = explode(',',$field); $cols = array(); $length = count($field); foreach ($rs as $result){ if(is_object($result)) $result = get_object_vars($result); if($length>1) { $cols[$result[$field[0]]] = ''; for($i=1; $i<$length; $i++) { if($i+1<$length){ $cols[$result[$field[0]]] .= $result[$field[$i]].$sepa; }else{ $cols[$result[$field[0]]] .= $result[$field[$i]]; } } }else{ $cols[] = $result[$field[0]]; } } return $cols; } return null; } public function count($condition='',$field='*') { $fields = 'count('.$field.') as tpcount'; if($this->viewModel) { $condition = $this->checkCondition($condition); } $rs = $this->db->find($condition,$this->getTableName(),$fields); return $this->getFirstCol($rs)|0; } public function max($field,$condition='') { $fields = 'MAX('.$field.') as tpmax'; if($this->viewModel) { $condition = $this->checkCondition($condition); } $rs = $this->db->find($condition,$this->getTableName(),$fields); if($rs) { return floatval($this->getFirstCol($rs)); }else{ return false; } } public function min($field,$condition='') { $fields = 'MIN('.$field.') as tpmin'; if($this->viewModel) { $condition = $this->checkCondition($condition); } $rs = $this->db->find($condition,$this->getTableName(),$fields); if($rs) { return floatval($this->getFirstCol($rs)); }else{ return false; } } public function sum($field,$condition='') { $fields = 'SUM('.$field.') as tpsum'; if($this->viewModel) { $condition = $this->checkCondition($condition); } $rs = $this->db->find($condition,$this->getTableName(),$fields); if($rs) { return floatval($this->getFirstCol($rs)); }else{ return false; } } public function avg($field,$condition='') { $fields = 'AVG('.$field.') as tpavg'; if($this->viewModel) { $condition = $this->checkCondition($condition); } $rs = $this->db->find($condition,$this->getTableName(),$fields); if($rs) { return floatval($this->getFirstCol($rs)); }else{ return false; } } public function getN($position=0,$condition='',$order='',$fields='*',$relation=false) { $table = $this->getTableName(); if(!empty($this->options)) { $condition = $this->options['where']? $this->options['where']: $condition; $table = $this->options['table']? $this->options['table']: $this->getTableName(); $fields = $this->options['filed']? $this->options['field']: $fields; $limit = $this->options['limit']? $this->options['limit']: $limit; $order = $this->options['order']? $this->options['order']: $order; $relation = isset($this->options['link'])? $this->options['link']: $relation; $this->options = array(); } if($this->viewModel) { $condition = $this->checkCondition($condition); $field = $this->checkFields($field); } if($position>=0) { $rs = $this->db->find($condition,$table,$fields,$order,$position.',1'); return $this->rsToVo($rs,false,0,$relation); }else{ $rs = $this->db->find($condition,$this->getTableName(),$fields,$order); return $this->rsToVo($rs,false,$position,$relation); } } public function first($condition='',$order='',$fields='*',$relation=false) { return $this->getN(0,$condition,$order,$fields,$relation); } public function last($condition='',$order='',$fields='*',$relation=false) { return $this->getN(-1,$condition,$order,$fields,$relation); } protected function cacheLockVersion($data) { if($this->optimLock) { if(is_object($data)) $data = get_object_vars($data); if(isset($data[$this->optimLock]) && isset($data[$this->getPk()])) { $_SESSION[$this->name.'_'.$data[$this->getPk()].'_lock_version'] = $data[$this->optimLock]; } } } public function rsToVo($resultSet,$returnList=false,$position=0,$relation='') { if($resultSet ) { if(!$returnList) { if(is_instance_of($resultSet,'ResultIterator')) { $resultSet = $resultSet->getIterator(); } if($position<0) { $position = count($resultSet)-abs($position); } if(count($resultSet)<= $position) { $this->error = L('_SELECT_NOT_EXIST_'); return false; } $result = $resultSet[$position]; $this->cacheLockVersion($result); $this->getBlobFields($result); $this->filterFields($result); if( $this->autoReadRelations || $relation ) { $result = $this->getRelation($result,$relation); } $result = auto_charset($result,C('DB_CHARSET'),C('TEMPLATE_CHARSET')); $this->data = (array)$result; return $result; }else{ if(is_instance_of($resultSet,'ResultIterator')) { return $resultSet; } $this->getListBlobFields($resultSet); $this->filterListFields($resultSet); if( $this->autoReadRelations || $relation ) { $this->getRelations($resultSet,$relation); } $resultSet = auto_charset($resultSet,C('DB_CHARSET'),C('TEMPLATE_CHARSET')); $this->dataList = $resultSet; return $resultSet; } }else { return false; } } public function create($data='',$batch=false) { if(true === $batch) { return $this->createAll($data); } if(empty($data)) { $data = $_POST; } elseif(is_instance_of($data,'HashMap')){ $data = $data->toArray(); } elseif(is_instance_of($data,'Model')){ $data = $data->getIterator(); } elseif(is_object($data)){ $data = get_object_vars($data); } elseif(!is_array($data)){ $this->error = L('_DATA_TYPE_INVALID_'); return false; } $vo = $this->_createData($data); return $vo; } public function createAll($dataList='') { if(empty($dataList)) { $dataList = $_POST; } elseif(!is_array($dataList)){ $this->error = L('_DATA_TYPE_INVALID_'); return false; } foreach ($dataList as $data){ $vo = $this->_createData($data); if(false === $vo) { return false; }else{ $this->dataList[] = $vo; } } return $this->dataList; } private function _createData($data) { $vo = array(); $type = 'add'; if(!$this->composite && isset($data[$this->getPk()])) { $value = $data[$this->getPk()]; $rs = $this->db->find($this->getPk()."='{$value}'",$this->getTableName()); if($rs && count($rs)>0) { $type = 'edit'; } } if(!$this->_before_validation($data,$type)) { return false; } if(!$this->autoValidation($data,$type)) { return false; } if(!$this->_after_validation($data,$type)) { return false; } if($this->composite) { foreach ($data as $key=>$val){ $vo[$key] = MAGIC_QUOTES_GPC? stripslashes($val) : $val; } }else{ if(isset($this->_map)) { foreach ($this->_map as $key=>$val){ if(isset($data[$key])) { $data[$val] = $data[$key]; unset($data[$key]); } } } foreach ( $this->fields as $key=>$name){ if(substr($key,0,1)=='_') continue; $val = isset($data[$name])?$data[$name]:null; if(!is_null($val) ){ $vo[$name] = MAGIC_QUOTES_GPC? stripslashes($val) : $val; }elseif( (strtolower($type) == "add" && in_array($name,$this->autoCreateTimestamps,true)) || (strtolower($type) == "edit" && in_array($name,$this->autoUpdateTimestamps,true)) ){ if(!empty($this->autoTimeFormat)) { $vo[$name] = date($this->autoTimeFormat); }else{ $vo[$name] = time(); } } } } $this->_before_operation($vo); $this->autoOperation($vo,$type); $this->_after_operation($vo); $this->data = $vo; if(DATA_TYPE_OBJ == C('DATA_RESULT_TYPE')) { $vo = (object) $vo; } return $vo; } private function autoOperation(&$data,$type) { if(!empty($this->_auto)) { foreach ($this->_auto as $auto){ if($this->composite || in_array($auto[0],$this->fields,true)) { if(empty($auto[2])) $auto[2] = 'ADD'; else $auto[2] = strtoupper($auto[2]); if( (strtolower($type) == "add" && $auto[2] == 'ADD') || (strtolower($type) == "edit" && $auto[2] == 'UPDATE') || $auto[2] == 'ALL') { switch($auto[3]) { case 'function': case 'callback': if(isset($auto[4])) { $args = $auto[4]; }else{ $args = array(); } array_unshift($args,$data[$auto[0]]); if('function'==$auto[3]) { $data[$auto[0]] = call_user_func_array($auto[1], $args); }else{ $data[$auto[0]] = call_user_func_array(array(&$this,$auto[1]), $args); } break; case 'field': $data[$auto[0]] = $data[$auto[1]]; break; case 'string': default: $data[$auto[0]] = $auto[1]; } if(false === $data[$auto[0]] ) { unset($data[$auto[0]]); } } } } } return $data; } private function autoValidation($data,$type) { if(!empty($this->_validate)) { import("ORG.Text.Validation"); $multiValidate = C('MULTI_FIELD_VALIDATE'); $this->validateError = array(); foreach($this->_validate as $key=>$val) { if(empty($val[5]) || $val[5]=='all' || strtolower($val[5])==strtolower($type) ) { if(0==strpos($val[2],'{%') && strpos($val[2],'}')) { $val[2] = L(substr($val[2],2,-1)); } switch($val[3]) { case MUST_TO_VALIDATE: if(!$this->_validationField($data,$val)){ if($multiValidate) { $this->validateError[$val[0]] = $val[2]; }else{ $this->error = $val[2]; return false; } } break; case VALUE_TO_VAILIDATE: if('' != trim($data[$val[0]])){ if(!$this->_validationField($data,$val)){ if($multiValidate) { $this->validateError[$val[0]] = $val[2]; }else{ $this->error = $val[2]; return false; } } } break; default: if(isset($data[$val[0]])){ if(!$this->_validationField($data,$val)){ if($multiValidate) { $this->validateError[$val[0]] = $val[2]; }else{ $this->error = $val[2]; return false; } } } } } } } if(!empty($this->validateError)) { return false; }else{ return true; } } protected function getValidateError() { if(!empty($this->validateError)) { return $this->validateError; }else{ return $this->error; } } private function _validationField($data,$val) { switch($val[4]) { case 'function': case 'callback': if(isset($val[6])) { $args = $val[6]; }else{ $args = array(); } array_unshift($args,$data[$val[0]]); if('function'==$val[4]) { return call_user_func_array($val[1], $args); }else{ return call_user_func_array(array(&$this, $val[1]), $args); } case 'confirm': if($data[$val[0]] != $data[$val[1]] ) { return false; } break; case 'in': if(!in_array($data[$val[0]] ,$val[1]) ) { return false; } break; case 'equal': if($data[$val[0]] != $val[1]) { return false; } break; case 'unique': if(is_string($val[0]) && strpos($val[0],',')) { $val[0] = explode(',',$val[0]); } if(is_array($val[0])) { $map = array(); foreach ($val[0] as $field){ $map[$field] = $data[$field]; } if($this->find($map)) { return false; } }else{ if($this->getBy($val[0],$data[$val[0]])) { return false; } } break; case 'regex': default: if( !Validation::check($data[$val[0]],$val[1])) { return false; } } return true; } protected function _before_validation(&$data,$type) {return true;} protected function _after_validation(&$data,$type) {return true;} protected function _before_operation(&$data) {} protected function _after_operation(&$data) {} public function getModelName() { if(empty($this->name)) { $prefix = C('MODEL_CLASS_PREFIX'); $suffix = C('MODEL_CLASS_SUFFIX'); if(strlen($suffix)>0) { $this->name = substr(substr(get_class($this),strlen($prefix)),0,-strlen($suffix)); }else{ $this->name = substr(get_class($this),strlen($prefix)); } } return $this->name; } public function getTableName() { if(empty($this->trueTableName)) { if($this->viewModel) { $tableName = ''; foreach ($this->viewFields as $key=>$view){ $Model = D($key); if($Model) { $tableName .= $Model->getTableName(); }else{ $viewTable = !empty($this->tablePrefix) ? $this->tablePrefix : ''; $viewTable .= $key; $viewTable .= !empty($this->tableSuffix) ? $this->tableSuffix : ''; $tableName .= strtolower($viewTable); } if(isset($view['_as'])) { $tableName .= ' '.$view['_as']; }else{ $tableName .= ' '.$key; } if(isset($view['_on'])) { $tableName .= ' ON '.$view['_on']; } if(!empty($view['_type'])) { $type = $view['_type']; }else{ $type = ''; } $tableName .= ' '.strtoupper($type).' JOIN '; $len = strlen($type.'_JOIN '); } $tableName = substr($tableName,0,-$len); $this->trueTableName = $tableName; }else{ $tableName = !empty($this->tablePrefix) ? $this->tablePrefix : ''; if(!empty($this->tableName)) { $tableName .= $this->tableName; }elseif(C('TABLE_NAME_IDENTIFY')){ $tableName .= $this->parseName($this->name); }else{ $tableName .= $this->name; } $tableName .= !empty($this->tableSuffix) ? $this->tableSuffix : ''; if(!empty($this->dbName)) { $tableName = $this->dbName.'.'.$tableName; } $this->trueTableName = strtolower($tableName); } } return $this->trueTableName; } public function getRelationTableName($relation) { $relationTable = !empty($this->tablePrefix) ? $this->tablePrefix : ''; $relationTable .= $this->tableName?$this->tableName:$this->name; $relationTable .= '_'.$relation->getModelName(); $relationTable .= !empty($this->tableSuffix) ? $this->tableSuffix : ''; return strtolower($relationTable); } public function startLazy() { $this->lazyQuery = true; return ; } public function stopLazy() { $this->lazyQuery = false; return ; } public function startLock() { $this->pessimisticLock = true; return ; } public function stopLock() { $this->pessimisticLock = false; return ; } public function startTrans() { $this->commit(); $this->db->startTrans(); return ; } public function commit() { return $this->db->commit(); } public function rollback() { return $this->db->rollback(); } public function getPk() { return isset($this->fields['_pk'])?$this->fields['_pk']:'id'; } public function getError(){ return $this->error; } public function getDbFields(){ return $this->fields; } public function getLastInsID() { return $this->db->lastInsID; } public function getAffectRows() { return $this->db->numRows; } public function getLastSql() { return $this->db->getLastSql(); } public function addConnect($config,$linkNum=NULL) { if(isset($this->_db[$linkNum])) { return false; } if(NULL === $linkNum && is_array($config)) { foreach ($config as $key=>$val){ $this->_db[$key] = Db::getInstance($val); } return true; } $this->_db[$linkNum] = Db::getInstance($config); return true; } public function delConnect($linkNum) { if(isset($this->_db[$linkNum])) { $this->_db[$linkNum]->close(); unset($this->_db[$linkNum]); return true; } return false; } public function closeConnect($linkNum) { if(isset($this->_db[$linkNum])) { $this->_db[$linkNum]->close(); return true; } return false; } public function switchConnect($linkNum) { if(isset($this->_db[$linkNum])) { $this->db = $this->_db[$linkNum]; return true; }else{ return false; } } public function where($where) { $this->options['where'] = $where; return $this; } public function order($order) { $this->options['order'] = $order; return $this; } public function table($table) { $this->options['table'] = $table; return $this; } public function group($group) { $this->options['group'] = $group; return $this; } public function field($field) { $this->options['field'] = $field; return $this; } public function limit($limit) { $this->options['limit'] = $limit; return $this; } public function join($join) { if(is_array($join)) { $this->options['join'] = $join; }else{ $this->options['join'][] = $join; } return $this; } public function having($having) { $this->options['having'] = $having; return $this; } public function lazy($lazy) { $this->options['lazy'] = $lazy; return $this; } public function lock($lock) { $this->options['lock'] = $lock; return $this; } public function cache($cache) { $this->options['cache'] = $cache; return $this; } public function sql($sql) { $this->options['sql'] = $sql; return $this; } public function data($data) { $this->options['data'] = $data; return $this; } public function relation($name) { $this->options['link'] = $name; return $this; } public function fetchSql($fetch=true) { if(in_array(strtolower($fetch),array('find','findall','save','add','delete'))) { $this->options['fetch'] = true; return $this->{$fetch}(); }else{ $this->options['fetch'] = $fetch; } return $this; } public function relationGet($name) { if(empty($this->data)) { return false; } $relation = $this->getRelation($this->data,$name,true); return $relation; } public function sortBy($field, $sortby='asc', $list='' ) { if(empty($list) && !empty($this->dataList)) { $list = $this->dataList; } if(is_array($list)){ $refer = $resultSet = array(); foreach ($list as $i => $data) { if(is_object($data)) { $data = get_object_vars($data); } $refer[$i] = &$data[$field]; } switch ($sortby) { case 'asc': asort($refer); break; case 'desc': arsort($refer); break; case 'nat': natcasesort($refer); break; } foreach ( $refer as $key=> $val) { $resultSet[] = &$list[$key]; } return $resultSet; } return false; } public function toTree($list=null, $pk='id',$pid = 'pid',$child = '_child',$root=0) { if(null === $list) { $list = &$this->dataList; } $tree = array(); if(is_array($list)) { $refer = array(); foreach ($list as $key => $data) { $_key = is_object($data)?$data->$pk:$data[$pk]; $refer[$_key] =& $list[$key]; } foreach ($list as $key => $data) { $parentId = is_object($data)?$data->$pid:$data[$pid]; if ($root == $parentId) { $tree[] =& $list[$key]; }else{ if (isset($refer[$parentId])) { $parent =& $refer[$parentId]; $parent[$child][] =& $list[$key]; } } } } return $tree; } }; ?><?php
 class View extends Base { protected $tVar = array(); protected $trace = array(); protected $type = ''; static function getInstance() { return get_instance_of(__CLASS__); } public function __construct($type='') { if(!empty($type)) { $this->type = $type; }else{ $this->type = strtoupper(C('TMPL_ENGINE_TYPE')); } } public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }elseif(is_object($name)){ foreach($name as $key =>$val) { $this->tVar[$key] = $val; } }else { $this->tVar[$name] = $value; } } public function trace($title,$value='') { if(is_array($title)) { $this->trace = array_merge($this->trace,$title); }else { $this->trace[$title] = $value; } } public function get($name){ if(isset($this->tVar[$name])) { return $this->tVar[$name]; }else { return false; } } public function __set($name,$value) { $this->assign($name,$value); } public function __get($name) { return $this->get($name); } public function display($templateFile='',$charset='',$contentType='text/html',$varPrefix='') { $this->fetch($templateFile,$charset,$contentType,$varPrefix,true); } protected function showTime($startTime) { if(C('SHOW_RUN_TIME')) { $endTime = microtime(TRUE); $total_run_time = number_format(($endTime - $GLOBALS['_beginTime']), 3); $showTime = 'Process: '.$total_run_time.'s '; if(C('SHOW_ADV_TIME')) { $_load_time = number_format(($GLOBALS['_loadTime'] -$GLOBALS['_beginTime'] ), 3); $_init_time = number_format(($GLOBALS['_initTime'] -$GLOBALS['_loadTime'] ), 3); $_exec_time = number_format(($startTime -$GLOBALS['_initTime'] ), 3); $_parse_time = number_format(($endTime - $startTime), 3); $showTime .= '( Load:'.$_load_time.'s Init:'.$_init_time.'s Exec:'.$_exec_time.'s Template:'.$_parse_time.'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $db = Db::getInstance(); $showTime .= ' | DB :'.$db->Q().' queries '.$db->W().' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $cache = Cache::getInstance(); $showTime .= ' | Cache :'.$cache->Q().' gets '.$cache->W().' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $startMem = array_sum(explode(' ', $GLOBALS['_startUseMems'])); $endMem = array_sum(explode(' ', memory_get_usage())); $showTime .= ' | UseMem:'. number_format(($endMem - $startMem)/1024).' kb'; } return $showTime; } } public function layout($layoutFile='',$charset='',$contentType='text/html',$varPrefix='',$display=true) { $startTime = microtime(TRUE); if(empty($layoutFile)) { $layoutFile = C('DEFAULT_LAYOUT'); } if(false === strpos($layoutFile,':')) { $layoutFile = 'Layout:'.$layoutFile; } $content = $this->fetch($layoutFile,$charset,$contentType,$varPrefix,false,false); $find = preg_match_all('/<!-- layout::(.+?)::(.+?) -->/is',$content,$matches); if($find) { for ($i=0; $i< $find; $i++) { if(0===strpos($matches[1][$i],'$')){ $matches[1][$i] = $this->get(substr($matches[1][$i],1)); } if(0 != $matches[2][$i] ) { $guid = md5($matches[1][$i]); $cache = S($guid); if($cache) { $layoutContent = $cache; }else{ $layoutContent = $this->fetch($matches[1][$i],$charset,$contentType,$varPrefix,false,false); S($guid,$layoutContent,$matches[2][$i]); } }else{ $layoutContent = $this->fetch($matches[1][$i],$charset,$contentType,$varPrefix,false,false); } $content = str_replace($matches[0][$i],$layoutContent,$content); } } if(C('HTML_CACHE_ON')) { HtmlCache::writeHTMLCache($content); } if($display) { $showTime = $this->showTime($startTime); echo $content; if(C('SHOW_RUN_TIME')) { echo '<div  id="think_run_time" class="think_run_time">'.$showTime.'</div>'; } $this->showTrace($showTime,$charset); return null; }else{ return $content; } } protected function checkCache($tmplTemplateFile) { $tmplCacheFile = CACHE_PATH.md5($tmplTemplateFile).C('CACHFILE_SUFFIX'); if(!is_file($tmplCacheFile)){ return false; } elseif (!C('TMPL_CACHE_ON')){ return false; }elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; } elseif (C('TMPL_CACHE_TIME') != -1 && time() > filemtime($tmplCacheFile)+C('TMPL_CACHE_TIME')) { return false; } return true; } public function fetch($templateFile='',$charset='',$contentType='text/html',$varPrefix='',$display=false,$htmlCache=true) { $startTime = microtime(TRUE); if(null===$templateFile) { return ; } if('layout::'==substr($templateFile,0,8)) { $this->layout(substr($templateFile,8)); return ; } if(empty($charset)) { $charset = C('OUTPUT_CHARSET'); } header("Content-Type:".$contentType."; charset=".$charset); header("Cache-control: private"); ini_set('output_buffering',4096); $zlibCompress = ini_get('zlib.output_compression'); if(empty($zlibCompress) && function_exists('ini_set')) { ini_set( 'zlib.output_compression', 1 ); } $pluginOn = C('THINK_PLUGIN_ON'); if($pluginOn) { apply_filter('ob_init'); } ob_start(); ob_implicit_flush(0); if($pluginOn) { apply_filter('ob_start'); $templateFile = apply_filter('template_file',$templateFile); } if(!file_exists_case($templateFile)){ if(''==$templateFile) { $templateFile = C('TMPL_FILE_NAME'); }elseif(strpos($templateFile,'#')){ $templateFile = LIB_PATH.str_replace(array('#',':'),array('/'.TMPL_DIR.'/'.TEMPLATE_NAME.'/','/'),$templateFile).C('TEMPLATE_SUFFIX'); }elseif(strpos($templateFile,'@')){ $templateFile = TMPL_PATH.str_replace(array('@',':'),'/',$templateFile).C('TEMPLATE_SUFFIX'); }elseif(strpos($templateFile,':')){ $templateFile = TEMPLATE_PATH.'/'.str_replace(':','/',$templateFile).C('TEMPLATE_SUFFIX'); }elseif(!is_file($templateFile)) { $templateFile = dirname(C('TMPL_FILE_NAME')).'/'.$templateFile.C('TEMPLATE_SUFFIX'); } if(!file_exists_case($templateFile)){ throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } } if($pluginOn) { $this->tVar = apply_filter('template_var',$this->tVar); } $compiler = false; switch($this->type) { case 'THINK': if(!$this->checkCache($templateFile)) { $compiler = true; import('Think.Template.ThinkTemplate'); $tpl = ThinkTemplate::getInstance(); $tpl->load($templateFile,$charset,$this->tVar,$varPrefix); }else{ extract($this->tVar, empty($varPrefix)? EXTR_OVERWRITE : EXTR_PREFIX_ALL,$varPrefix); include CACHE_PATH.md5($templateFile).C('CACHFILE_SUFFIX'); } break; case 'SMARTY': $templateFile=substr($templateFile,strlen(TMPL_PATH)); vendor('Smarty.Smarty#class'); $tpl = new Smarty(); if(C('TMPL_ENGINE_CONFIG')) { $config = C('TMPL_ENGINE_CONFIG'); foreach ($config as $key=>$val){ $tpl->{$key} = $val; } }else{ $tpl->caching = C('TMPL_CACHE_ON'); $tpl->template_dir = TMPL_PATH; $tpl->compile_dir = CACHE_PATH ; $tpl->cache_dir = TEMP_PATH ; } $tpl->assign($this->tVar); $tpl->display($templateFile); break; case 'SMART': $templateFile=substr($templateFile,strlen(TMPL_PATH)); vendor('SmartTemplate.class#smarttemplate'); $tpl = new SmartTemplate($templateFile); if(C('TMPL_ENGINE_CONFIG')) { $config = C('TMPL_ENGINE_CONFIG'); foreach ($config as $key=>$val){ $tpl->{$key} = $val; } }else{ $tpl->caching = C('TMPL_CACHE_ON'); $tpl->template_dir = TMPL_PATH; $tpl->temp_dir = CACHE_PATH ; $tpl->cache_dir = TEMP_PATH ; } $tpl->assign($this->tVar); $tpl->output(); break; case 'LITE': $templateFile=substr($templateFile,strlen(TMPL_PATH)); vendor("TemplateLite.class#template"); $tpl = new Template_Lite(); if(C('TMPL_ENGINE_CONFIG')) { $config = C('TMPL_ENGINE_CONFIG'); foreach ($config as $key=>$val){ $tpl->{$key} = $val; } }else{ $tpl->template_dir = TMPL_PATH; $tpl->compile_dir = CACHE_PATH ; $tpl->cache_dir = TEMP_PATH ; } $tpl->assign($this->tVar); $tpl->display($templateFile); break; case 'EASE': $templateFile = substr($templateFile,strlen(TMPL_PATH),-5); $CacheDir = substr(CACHE_PATH,0,-1); $TemplateDir = substr(TMPL_PATH,0,-1); vendor('EaseTemplate.template#ease'); if(C('TMPL_ENGINE_CONFIG')) { $config = C('TMPL_ENGINE_CONFIG'); }else{ $config = array( 'CacheDir'=>$CacheDir, 'TemplateDir'=>$TemplateDir, 'TplType'=>'html' ); } $tpl = new EaseTemplate($config); $tpl->set_var($this->tVar); $tpl->set_file($templateFile); $tpl->p(); break; case 'PHP': default: extract($this->tVar, empty($varPrefix)? EXTR_OVERWRITE : EXTR_PREFIX_ALL,$varPrefix); include $templateFile; } $content = ob_get_clean(); $content = auto_charset($content,C('TEMPLATE_CHARSET'),$charset); if($pluginOn) { $content = apply_filter('ob_content',$content); } if(C('HTML_CACHE_ON') && $htmlCache) { HtmlCache::writeHTMLCache($content); } if($display) { $showTime = $this->showTime($startTime); echo $content; if(C('SHOW_RUN_TIME')) { echo '<div  id="think_run_time" class="think_run_time">'.$showTime.'</div>'; } $this->showTrace($showTime,$charset,$compiler); return null; }else { return $content; } } protected function showTrace($showTime,$charset,$compiler=true){ if(C('SHOW_PAGE_TRACE')) { $traceFile = CONFIG_PATH.'trace.php'; if(file_exists_case($traceFile)) { $_trace = include $traceFile; }else{ $_trace = array(); } $this->trace('当前页面', $_SERVER['PHP_SELF']); $this->trace('请求方法', $_SERVER['REQUEST_METHOD']); $this->trace('通信协议', $_SERVER['SERVER_PROTOCOL']); $this->trace('请求时间', date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME'])); $this->trace('用户代理', $_SERVER['HTTP_USER_AGENT']); $this->trace('会话ID' , session_id()); $this->trace('运行数据', $showTime); $this->trace('输出编码', $charset); $this->trace('加载类库', count($GLOBALS['import_file'])); $this->trace('模板编译', !empty($compiler)?'重新编译':'读取缓存'); if(isset(Log::$log[SQL_LOG_DEBUG])) { $log = Log::$log[SQL_LOG_DEBUG]; $this->trace('SQL记录',is_array($log)?count($log).'条SQL<br/>'.implode('<br/>',$log):'无SQL记录'); }else{ $this->trace('SQL记录','无SQL记录'); } if(isset(Log::$log[WEB_LOG_ERROR])) { $log = Log::$log[WEB_LOG_ERROR]; $this->trace('错误记录',is_array($log)?count($log).'条错误<br/>'.implode('<br/>',$log):'无错误记录'); }else{ $this->trace('错误记录','无错误记录'); } $_trace = array_merge($_trace,$this->trace); $_trace = auto_charset($_trace,'utf-8'); $_title = auto_charset('页面Trace信息','utf-8'); include THINK_PATH.'/Tpl/PageTrace.tpl.php'; } } }?>